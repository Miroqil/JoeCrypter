#ifndef _IMAGEHLP_H
#define _IMAGEHLP_H

#if __POCC__ >= 500
#pragma once
#endif

/* Windows Image help definitions */

#ifdef _WIN64
#ifndef _IMAGEHLP64
#define _IMAGEHLP64
#endif
#endif /* _WIN64 */

#include <pshpack8.h>
#include <wintrust.h>

#if defined(WIN32_DEFAULT_LIBS)
#pragma comment(lib, "imagehlp.lib")
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if __POCC__ >= 290
#pragma warn(push)
#pragma warn(disable:2185)  /* Alignment of field 'x' can be less than the natural alignment */
#pragma warn(disable:2198)  /* Nameless field is not standard */
#pragma warn(disable:2225)  /* Type padded due to alignment */
#endif

#define IMAGEAPI DECLSPEC_IMPORT __stdcall
#if __POCC__ >= 650
#define DBHLP_DEPRECATED  __declspec(deprecated)
#else /* __POCC__ < 650 */
#define DBHLP_DEPRECATED
#endif /* __POCC__ < 650 */
#define DBHLPAPI IMAGEAPI

#define IMAGE_SEPARATION  (64*1024)

typedef struct _LOADED_IMAGE {
    PSTR ModuleName;
    HANDLE hFile;
    PUCHAR MappedAddress;
#ifdef _IMAGEHLP64
    PIMAGE_NT_HEADERS64 FileHeader;
#else /* !_IMAGEHLP64 */
    PIMAGE_NT_HEADERS32 FileHeader;
#endif /* !_IMAGEHLP64 */
    PIMAGE_SECTION_HEADER LastRvaSection;
    ULONG NumberOfSections;
    PIMAGE_SECTION_HEADER Sections;
    ULONG Characteristics;
    BOOLEAN fSystemImage;
    BOOLEAN fDOSImage;
    BOOLEAN fReadOnly;
    UCHAR Version;
    LIST_ENTRY Links;
    ULONG SizeOfImage;
} LOADED_IMAGE, *PLOADED_IMAGE;

#define MAX_SYM_NAME  2000

BOOL IMAGEAPI BindImage(PCSTR, PCSTR, PCSTR);

typedef enum _IMAGEHLP_STATUS_REASON {
    BindOutOfMemory,
    BindRvaToVaFailed,
    BindNoRoomInImage,
    BindImportModuleFailed,
    BindImportProcedureFailed,
    BindImportModule,
    BindImportProcedure,
    BindForwarder,
    BindForwarderNOT,
    BindImageModified,
    BindExpandFileHeaders,
    BindImageComplete,
    BindMismatchedSymbols,
    BindSymbolsNotUpdated,
    BindImportProcedure32,
    BindImportProcedure64,
    BindForwarder32,
    BindForwarder64,
    BindForwarderNOT32,
    BindForwarderNOT64
} IMAGEHLP_STATUS_REASON;

typedef BOOL (__stdcall *PIMAGEHLP_STATUS_ROUTINE)(IMAGEHLP_STATUS_REASON, PCSTR, PCSTR, ULONG_PTR, ULONG_PTR);
typedef BOOL (__stdcall *PIMAGEHLP_STATUS_ROUTINE32)(IMAGEHLP_STATUS_REASON, PCSTR, PCSTR, ULONG, ULONG_PTR);
typedef BOOL (__stdcall *PIMAGEHLP_STATUS_ROUTINE64)(IMAGEHLP_STATUS_REASON, PCSTR, PCSTR, ULONG64, ULONG_PTR);

BOOL IMAGEAPI BindImageEx(DWORD, PCSTR, PCSTR, PCSTR, PIMAGEHLP_STATUS_ROUTINE);

#define BIND_NO_BOUND_IMPORTS  0x00000001
#define BIND_NO_UPDATE  0x00000002
#define BIND_ALL_IMAGES  0x00000004
#define BIND_CACHE_IMPORT_DLLS  0x00000008
#define BIND_REPORT_64BIT_VA   0x00000010

BOOL IMAGEAPI ReBaseImage(PCSTR, PCSTR, BOOL, BOOL, BOOL, ULONG, ULONG *, ULONG_PTR *, ULONG *, ULONG_PTR *, ULONG);
BOOL IMAGEAPI ReBaseImage64(PCSTR, PCSTR, BOOL, BOOL, BOOL, ULONG, ULONG *, ULONG64 *, ULONG *, ULONG64 *, ULONG);

#define CHECKSUM_SUCCESS  0
#define CHECKSUM_OPEN_FAILURE  1
#define CHECKSUM_MAP_FAILURE  2
#define CHECKSUM_MAPVIEW_FAILURE  3
#define CHECKSUM_UNICODE_FAILURE  4

#define SPLITSYM_REMOVE_PRIVATE  0x00000001
#define SPLITSYM_EXTRACT_ALL  0x00000002
#define SPLITSYM_SYMBOLPATH_IS_SRC  0x00000004

PIMAGE_NT_HEADERS IMAGEAPI CheckSumMappedFile(PVOID, DWORD, PDWORD, PDWORD);
DWORD IMAGEAPI MapFileAndCheckSumA(PCSTR, PDWORD, PDWORD);
DWORD IMAGEAPI MapFileAndCheckSumW(PCWSTR, PDWORD, PDWORD);

#ifdef UNICODE
#define MapFileAndCheckSum  MapFileAndCheckSumW
#else /* !UNICODE */
#define MapFileAndCheckSum  MapFileAndCheckSumA
#endif /* !UNICODE */

BOOL IMAGEAPI GetImageConfigInformation(PLOADED_IMAGE, PIMAGE_LOAD_CONFIG_DIRECTORY);
DWORD IMAGEAPI GetImageUnusedHeaderBytes(PLOADED_IMAGE, PDWORD);
BOOL IMAGEAPI SetImageConfigInformation(PLOADED_IMAGE, PIMAGE_LOAD_CONFIG_DIRECTORY);

#define CERT_PE_IMAGE_DIGEST_DEBUG_INFO  0x01
#define CERT_PE_IMAGE_DIGEST_RESOURCES  0x02
#define CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO  0x04
#define CERT_PE_IMAGE_DIGEST_NON_PE_INFO  0x08

#define CERT_SECTION_TYPE_ANY  0xFF

typedef PVOID DIGEST_HANDLE;

typedef BOOL (WINAPI *DIGEST_FUNCTION)(DIGEST_HANDLE, PBYTE, DWORD);

BOOL IMAGEAPI ImageGetDigestStream(HANDLE, DWORD, DIGEST_FUNCTION, DIGEST_HANDLE);
BOOL IMAGEAPI ImageAddCertificate(HANDLE, LPWIN_CERTIFICATE, PDWORD);
BOOL IMAGEAPI ImageRemoveCertificate(HANDLE, DWORD);
BOOL IMAGEAPI ImageEnumerateCertificates(HANDLE, WORD, PDWORD, PDWORD, DWORD);
BOOL IMAGEAPI ImageGetCertificateData(HANDLE, DWORD, LPWIN_CERTIFICATE, PDWORD);
BOOL IMAGEAPI ImageGetCertificateHeader(HANDLE, DWORD, LPWIN_CERTIFICATE);
PLOADED_IMAGE IMAGEAPI ImageLoad(PCSTR, PCSTR);
BOOL IMAGEAPI ImageUnload(PLOADED_IMAGE);
BOOL IMAGEAPI MapAndLoad(PCSTR, PCSTR, PLOADED_IMAGE, BOOL, BOOL);
BOOL IMAGEAPI UnMapAndLoad(PLOADED_IMAGE);
BOOL IMAGEAPI TouchFileTimes(HANDLE, PSYSTEMTIME);
BOOL IMAGEAPI SplitSymbols(PSTR, PCSTR, PSTR, ULONG);
BOOL IMAGEAPI UpdateDebugInfoFile(PCSTR, PCSTR, PSTR, PIMAGE_NT_HEADERS32);
BOOL IMAGEAPI UpdateDebugInfoFileEx(PCSTR, PCSTR, PSTR, PIMAGE_NT_HEADERS32, DWORD);

#define ERROR_IMAGE_NOT_STRIPPED  0x8800
#define ERROR_NO_DBG_POINTER  0x8801
#define ERROR_NO_PDB_POINTER  0x8802

typedef BOOL (CALLBACK *PFIND_DEBUG_FILE_CALLBACK)(HANDLE, PCSTR, PVOID);
typedef BOOL (CALLBACK *PFIND_DEBUG_FILE_CALLBACKW)(HANDLE, PCWSTR, PVOID);
typedef BOOL(CALLBACK *PFINDFILEINPATHCALLBACK)(PCSTR, PVOID);
typedef BOOL(CALLBACK *PFINDFILEINPATHCALLBACKW)(PCWSTR, PVOID);
typedef BOOL(CALLBACK *PFIND_EXE_FILE_CALLBACK)(HANDLE, PCSTR, PVOID);
typedef BOOL(CALLBACK *PFIND_EXE_FILE_CALLBACKW)(HANDLE, PCWSTR, PVOID);

HANDLE IMAGEAPI SymFindDebugInfoFile(HANDLE, PCSTR, PSTR, PFIND_DEBUG_FILE_CALLBACK, PVOID);
HANDLE IMAGEAPI SymFindDebugInfoFileW(HANDLE, PCWSTR, PWSTR, PFIND_DEBUG_FILE_CALLBACKW, PVOID);
HANDLE IMAGEAPI FindDebugInfoFile(PCSTR, PCSTR, PSTR);
HANDLE IMAGEAPI FindDebugInfoFileEx(PCSTR, PCSTR, PSTR, PFIND_DEBUG_FILE_CALLBACK, PVOID);
HANDLE IMAGEAPI FindDebugInfoFileExW(PCWSTR, PCWSTR, PWSTR, PFIND_DEBUG_FILE_CALLBACKW, PVOID);
BOOL IMAGEAPI SymFindFileInPath(HANDLE, PCSTR, PCSTR, PVOID, DWORD, DWORD, DWORD, PSTR, PFINDFILEINPATHCALLBACK, PVOID);
BOOL IMAGEAPI SymFindFileInPathW(HANDLE, PCWSTR, PCWSTR, PVOID, DWORD, DWORD, DWORD, PWSTR, PFINDFILEINPATHCALLBACKW, PVOID);
HANDLE IMAGEAPI SymFindExecutableImage(HANDLE, PCSTR, PSTR, PFIND_EXE_FILE_CALLBACK, PVOID);
HANDLE IMAGEAPI SymFindExecutableImageW(HANDLE, PCWSTR, PWSTR, PFIND_EXE_FILE_CALLBACKW, PVOID);
HANDLE IMAGEAPI FindExecutableImage(PCSTR, PCSTR, PSTR);
HANDLE IMAGEAPI FindExecutableImageEx(PCSTR, PCSTR, PSTR, PFIND_EXE_FILE_CALLBACK, PVOID);
HANDLE IMAGEAPI FindExecutableImageExW(PCWSTR, PCWSTR, PWSTR, PFIND_EXE_FILE_CALLBACKW, PVOID);
PIMAGE_NT_HEADERS IMAGEAPI ImageNtHeader(PVOID);
PVOID IMAGEAPI ImageDirectoryEntryToDataEx(PVOID, BOOLEAN, USHORT, PULONG, PIMAGE_SECTION_HEADER *);
PVOID IMAGEAPI ImageDirectoryEntryToData(PVOID, BOOLEAN, USHORT, PULONG);
PIMAGE_SECTION_HEADER IMAGEAPI ImageRvaToSection(PIMAGE_NT_HEADERS, PVOID, ULONG);
PVOID IMAGEAPI ImageRvaToVa(PIMAGE_NT_HEADERS, PVOID, ULONG, PIMAGE_SECTION_HEADER *);

#ifndef _WIN64
/* won't be ported to Win64 */
typedef struct _IMAGE_DEBUG_INFORMATION {
    LIST_ENTRY List;
    DWORD ReservedSize;
    PVOID ReservedMappedBase;
    USHORT ReservedMachine;
    USHORT ReservedCharacteristics;
    DWORD ReservedCheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD ReservedNumberOfSections;
    PIMAGE_SECTION_HEADER ReservedSections;
    DWORD ReservedExportedNamesSize;
    PSTR ReservedExportedNames;
    DWORD ReservedNumberOfFunctionTableEntries;
    PIMAGE_FUNCTION_ENTRY ReservedFunctionTableEntries;
    DWORD ReservedLowestFunctionStartingAddress;
    DWORD ReservedHighestFunctionEndingAddress;
    DWORD ReservedNumberOfFpoTableEntries;
    PFPO_DATA ReservedFpoTableEntries;
    DWORD SizeOfCoffSymbols;
    PIMAGE_COFF_SYMBOLS_HEADER CoffSymbols;
    DWORD ReservedSizeOfCodeViewSymbols;
    PVOID ReservedCodeViewSymbols;
    PSTR ImageFilePath;
    PSTR ImageFileName;
    PSTR ReservedDebugFilePath;
    DWORD ReservedTimeDateStamp;
    BOOL  ReservedRomImage;
    PIMAGE_DEBUG_DIRECTORY ReservedDebugDirectory;
    DWORD ReservedNumberOfDebugDirectories;
    DWORD ReservedOriginalFunctionTableBaseAddress;
    DWORD Reserved[2];
} IMAGE_DEBUG_INFORMATION, *PIMAGE_DEBUG_INFORMATION;

PIMAGE_DEBUG_INFORMATION IMAGEAPI MapDebugInformation(HANDLE, PCSTR, PCSTR, ULONG);
BOOL IMAGEAPI UnmapDebugInformation(PIMAGE_DEBUG_INFORMATION);
#endif /* _WIN64 */

typedef BOOL(CALLBACK *PENUMDIRTREE_CALLBACK) (PCSTR, PVOID);
typedef BOOL(CALLBACK *PENUMDIRTREE_CALLBACKW) (PCWSTR, PVOID);

BOOL IMAGEAPI SearchTreeForFile(PCSTR, PCSTR, PSTR);
BOOL IMAGEAPI SearchTreeForFileW(PCWSTR, PCWSTR, PWSTR);
BOOL IMAGEAPI EnumDirTree(HANDLE, PCSTR, PCSTR, PSTR, PENUMDIRTREE_CALLBACK, PVOID);
BOOL IMAGEAPI EnumDirTreeW(HANDLE, PCWSTR, PCWSTR, PWSTR, PENUMDIRTREE_CALLBACKW, PVOID);
BOOL IMAGEAPI MakeSureDirectoryPathExists(PCSTR);

#define UNDNAME_COMPLETE  0x0000
#define UNDNAME_NO_LEADING_UNDERSCORES  0x0001
#define UNDNAME_NO_MS_KEYWORDS  0x0002
#define UNDNAME_NO_FUNCTION_RETURNS  0x0004
#define UNDNAME_NO_ALLOCATION_MODEL  0x0008
#define UNDNAME_NO_ALLOCATION_LANGUAGE  0x0010
#define UNDNAME_NO_MS_THISTYPE  0x0020
#define UNDNAME_NO_CV_THISTYPE  0x0040
#define UNDNAME_NO_THISTYPE  0x0060
#define UNDNAME_NO_ACCESS_SPECIFIERS  0x0080
#define UNDNAME_NO_THROW_SIGNATURES  0x0100
#define UNDNAME_NO_MEMBER_TYPE  0x0200
#define UNDNAME_NO_RETURN_UDT_MODEL  0x0400
#define UNDNAME_32_BIT_DECODE  0x0800
#define UNDNAME_NAME_ONLY  0x1000
#define UNDNAME_NO_ARGUMENTS  0x2000
#define UNDNAME_NO_SPECIAL_SYMS  0x4000

DWORD IMAGEAPI WINAPI UnDecorateSymbolName(PCSTR, PSTR, DWORD, DWORD);
DWORD IMAGEAPI WINAPI UnDecorateSymbolNameW(PCWSTR, PWSTR, DWORD, DWORD);

#define DBHHEADER_DEBUGDIRS  0x1
#define DBHHEADER_CVMISC  0x2
#define DBHHEADER_PDBGUID  0x3

typedef struct _MODLOAD_DATA {
    DWORD ssize;
    DWORD ssig;
    PVOID data;
    DWORD size;
    DWORD flags;
} MODLOAD_DATA, *PMODLOAD_DATA;

typedef struct _MODLOAD_CVMISC {
    DWORD oCV;
    size_t cCV;
    DWORD oMisc;
    size_t cMisc;
    DWORD dtImage;
    DWORD cImage;
} MODLOAD_CVMISC, *PMODLOAD_CVMISC;

typedef struct _MODLOAD_PDBGUID_PDBAGE {
    GUID PdbGuid;
    DWORD PdbAge;
} MODLOAD_PDBGUID_PDBAGE, *PMODLOAD_PDBGUID_PDBAGE;

typedef enum {
    AddrMode1616,
    AddrMode1632,
    AddrModeReal,
    AddrModeFlat
} ADDRESS_MODE;

typedef struct _tagADDRESS64 {
    DWORD64 Offset;
    WORD Segment;
    ADDRESS_MODE Mode;
} ADDRESS64, *LPADDRESS64;

#ifdef _IMAGEHLP64
#define ADDRESS ADDRESS64
#define LPADDRESS LPADDRESS64
#else /* !_IMAGEHLP64 */
typedef struct _tagADDRESS {
    DWORD Offset;
    WORD Segment;
    ADDRESS_MODE Mode;
} ADDRESS  , *LPADDRESS;

__inline void Address32To64(LPADDRESS a32, LPADDRESS64 a64)
{
    a64->Offset = (ULONG64)(LONG64)(LONG)a32->Offset;
    a64->Segment = a32->Segment;
    a64->Mode = a32->Mode;
}

__inline void Address64To32(LPADDRESS64 a64, LPADDRESS a32)
{
    a32->Offset = (ULONG)a64->Offset;
    a32->Segment = a64->Segment;
    a32->Mode = a64->Mode;
}
#endif /* !_IMAGEHLP64 */

typedef struct _KDHELP64 {
    DWORD64 Thread;
    DWORD ThCallbackStack;
    DWORD ThCallbackBStore;
    DWORD NextCallback;
    DWORD FramePointer;
    DWORD64 KiCallUserMode;
    DWORD64 KeUserCallbackDispatcher;
    DWORD64 SystemRangeStart;
    DWORD64 KiUserExceptionDispatcher;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 Reserved[5];
} KDHELP64, *PKDHELP64;

#ifdef _IMAGEHLP64
#define KDHELP KDHELP64
#define PKDHELP PKDHELP64
#else /* !_IMAGEHLP64 */
typedef struct _KDHELP {
    DWORD Thread;
    DWORD ThCallbackStack;
    DWORD NextCallback;
    DWORD FramePointer;
    DWORD KiCallUserMode;
    DWORD KeUserCallbackDispatcher;
    DWORD SystemRangeStart;
    DWORD ThCallbackBStore;
    DWORD KiUserExceptionDispatcher;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD Reserved[5];
} KDHELP, *PKDHELP;

__inline void KdHelp32To64(PKDHELP p32, PKDHELP64 p64)
{
    p64->Thread = p32->Thread;
    p64->ThCallbackStack = p32->ThCallbackStack;
    p64->NextCallback = p32->NextCallback;
    p64->FramePointer = p32->FramePointer;
    p64->KiCallUserMode = p32->KiCallUserMode;
    p64->KeUserCallbackDispatcher = p32->KeUserCallbackDispatcher;
    p64->SystemRangeStart = p32->SystemRangeStart;
    p64->KiUserExceptionDispatcher = p32->KiUserExceptionDispatcher;
    p64->StackBase = p32->StackBase;
    p64->StackLimit = p32->StackLimit;
}
#endif /* !_IMAGEHLP64 */

typedef struct _tagSTACKFRAME64 {
    ADDRESS64 AddrPC;
    ADDRESS64 AddrReturn;
    ADDRESS64 AddrFrame;
    ADDRESS64 AddrStack;
    ADDRESS64 AddrBStore;
    PVOID FuncTableEntry;
    DWORD64 Params[4];
    BOOL Far;
    BOOL Virtual;
    DWORD64 Reserved[3];
    KDHELP64 KdHelp;
} STACKFRAME64  , *LPSTACKFRAME64;

#ifdef _IMAGEHLP64
#define STACKFRAME STACKFRAME64
#define LPSTACKFRAME LPSTACKFRAME64
#else /* !_IMAGEHLP64 */
typedef struct _tagSTACKFRAME {
    ADDRESS AddrPC;
    ADDRESS AddrReturn;
    ADDRESS AddrFrame;
    ADDRESS AddrStack;
    PVOID FuncTableEntry;
    DWORD Params[4];
    BOOL Far;
    BOOL Virtual;
    DWORD Reserved[3];
    KDHELP KdHelp;
    ADDRESS AddrBStore;
} STACKFRAME  , *LPSTACKFRAME;
#endif /* !_IMAGEHLP64 */

typedef BOOL (__stdcall *PREAD_PROCESS_MEMORY_ROUTINE64)(HANDLE, DWORD64, PVOID, DWORD, LPDWORD);
typedef PVOID (__stdcall *PFUNCTION_TABLE_ACCESS_ROUTINE64)(HANDLE, DWORD64);
typedef DWORD64 (__stdcall *PGET_MODULE_BASE_ROUTINE64)(HANDLE, DWORD64);
typedef DWORD64 (__stdcall *PTRANSLATE_ADDRESS_ROUTINE64)(HANDLE, HANDLE, LPADDRESS64);

BOOL IMAGEAPI StackWalk64(DWORD, HANDLE, HANDLE, LPSTACKFRAME64, PVOID, PREAD_PROCESS_MEMORY_ROUTINE64, PFUNCTION_TABLE_ACCESS_ROUTINE64, PGET_MODULE_BASE_ROUTINE64, PTRANSLATE_ADDRESS_ROUTINE64);

#ifdef _IMAGEHLP64
#define PREAD_PROCESS_MEMORY_ROUTINE PREAD_PROCESS_MEMORY_ROUTINE64
#define PFUNCTION_TABLE_ACCESS_ROUTINE PFUNCTION_TABLE_ACCESS_ROUTINE64
#define PGET_MODULE_BASE_ROUTINE PGET_MODULE_BASE_ROUTINE64
#define PTRANSLATE_ADDRESS_ROUTINE PTRANSLATE_ADDRESS_ROUTINE64
#define StackWalk StackWalk64
#else /* !_IMAGEHLP64 */
typedef BOOL (__stdcall *PREAD_PROCESS_MEMORY_ROUTINE)(HANDLE, DWORD, PVOID, DWORD, PDWORD);
typedef PVOID (__stdcall *PFUNCTION_TABLE_ACCESS_ROUTINE)(HANDLE, DWORD);
typedef DWORD (__stdcall *PGET_MODULE_BASE_ROUTINE)(HANDLE, DWORD);
typedef DWORD (__stdcall *PTRANSLATE_ADDRESS_ROUTINE)(HANDLE, HANDLE, LPADDRESS);
BOOL IMAGEAPI StackWalk(DWORD, HANDLE, HANDLE, LPSTACKFRAME, PVOID, PREAD_PROCESS_MEMORY_ROUTINE, PFUNCTION_TABLE_ACCESS_ROUTINE, PGET_MODULE_BASE_ROUTINE, PTRANSLATE_ADDRESS_ROUTINE);
#endif /* !_IMAGEHLP64 */

#define API_VERSION_NUMBER  11

typedef struct API_VERSION {
    USHORT MajorVersion;
    USHORT MinorVersion;
    USHORT Revision;
    USHORT Reserved;
} API_VERSION, *LPAPI_VERSION;

LPAPI_VERSION IMAGEAPI ImagehlpApiVersion(VOID);
LPAPI_VERSION IMAGEAPI ImagehlpApiVersionEx(LPAPI_VERSION);
DWORD IMAGEAPI GetTimestampForLoadedLibrary(HMODULE);

typedef BOOL(CALLBACK *PSYM_ENUMMODULES_CALLBACK64)(PCSTR, DWORD64, PVOID);
typedef BOOL(CALLBACK *PSYM_ENUMMODULES_CALLBACKW64)(PCWSTR, DWORD64, PVOID);
typedef BOOL(CALLBACK *PENUMLOADED_MODULES_CALLBACK64)(PCSTR, DWORD64, ULONG, PVOID);
typedef BOOL(CALLBACK *PENUMLOADED_MODULES_CALLBACKW64)(PCWSTR, DWORD64, ULONG, PVOID);
typedef BOOL(CALLBACK *PSYM_ENUMSYMBOLS_CALLBACK64)(PCSTR, DWORD64, ULONG, PVOID);
typedef BOOL(CALLBACK *PSYM_ENUMSYMBOLS_CALLBACK64W)(PCWSTR, DWORD64, ULONG, PVOID);
typedef BOOL(CALLBACK *PSYMBOL_REGISTERED_CALLBACK64)(HANDLE, ULONG, ULONG64, ULONG64);
typedef PVOID (CALLBACK *PSYMBOL_FUNCENTRY_CALLBACK)(HANDLE, DWORD, PVOID);
typedef PVOID (CALLBACK *PSYMBOL_FUNCENTRY_CALLBACK64)(HANDLE, ULONG64, ULONG64);

#ifdef _IMAGEHLP64
#define PSYM_ENUMMODULES_CALLBACK PSYM_ENUMMODULES_CALLBACK64
#define PSYM_ENUMSYMBOLS_CALLBACK PSYM_ENUMSYMBOLS_CALLBACK64
#define PSYM_ENUMSYMBOLS_CALLBACKW PSYM_ENUMSYMBOLS_CALLBACK64W
#define PENUMLOADED_MODULES_CALLBACK PENUMLOADED_MODULES_CALLBACK64
#define PSYMBOL_REGISTERED_CALLBACK PSYMBOL_REGISTERED_CALLBACK64
#define PSYMBOL_FUNCENTRY_CALLBACK PSYMBOL_FUNCENTRY_CALLBACK64
#else /* !_IMAGEHLP64 */
typedef BOOL (CALLBACK *PSYM_ENUMMODULES_CALLBACK)(PCSTR, ULONG, PVOID);
typedef BOOL (CALLBACK *PSYM_ENUMSYMBOLS_CALLBACK)(PCSTR, ULONG, ULONG, PVOID);
typedef BOOL (CALLBACK *PSYM_ENUMSYMBOLS_CALLBACKW)(PCWSTR, ULONG, ULONG, PVOID);
typedef BOOL (CALLBACK *PENUMLOADED_MODULES_CALLBACK)(PCSTR, ULONG, ULONG, PVOID);
typedef BOOL (CALLBACK *PSYMBOL_REGISTERED_CALLBACK)(HANDLE, ULONG, PVOID, PVOID);
#endif /* !_IMAGEHLP64 */

#ifdef _NO_CVCONST_H
enum SymTagEnum {
    SymTagNull,
    SymTagExe,
    SymTagCompiland,
    SymTagCompilandDetails,
    SymTagCompilandEnv,
    SymTagFunction,
    SymTagBlock,
    SymTagData,
    SymTagAnnotation,
    SymTagLabel,
    SymTagPublicSymbol,
    SymTagUDT,
    SymTagEnum,
    SymTagFunctionType,
    SymTagPointerType,
    SymTagArrayType,
    SymTagBaseType,
    SymTagTypedef,
    SymTagBaseClass,
    SymTagFriend,
    SymTagFunctionArgType,
    SymTagFuncDebugStart,
    SymTagFuncDebugEnd,
    SymTagUsingNamespace,
    SymTagVTableShape,
    SymTagVTable,
    SymTagCustom,
    SymTagThunk,
    SymTagCustomType,
    SymTagManagedType,
    SymTagDimension,
    SymTagMax
};
#endif /* _NO_CVCONST_H */

#define SYMFLAG_VALUEPRESENT  0x00000001
#define SYMFLAG_REGISTER  0x00000008
#define SYMFLAG_REGREL  0x00000010
#define SYMFLAG_FRAMEREL  0x00000020
#define SYMFLAG_PARAMETER  0x00000040
#define SYMFLAG_LOCAL  0x00000080
#define SYMFLAG_CONSTANT  0x00000100
#define SYMFLAG_EXPORT  0x00000200
#define SYMFLAG_FORWARDER  0x00000400
#define SYMFLAG_FUNCTION  0x00000800
#define SYMFLAG_VIRTUAL  0x00001000
#define SYMFLAG_THUNK  0x00002000
#define SYMFLAG_TLSREL  0x00004000
#define SYMFLAG_SLOT  0x00008000
#define SYMFLAG_ILREL  0x00010000
#define SYMFLAG_METADATA   0x00020000
#define SYMFLAG_CLR_TOKEN  0x00040000
#define SYMFLAG_RESET  0x80000000

typedef enum {
    SymNone = 0,
    SymCoff,
    SymCv,
    SymPdb,
    SymExport,
    SymDeferred,
    SymSym,
    SymDia,
    SymVirtual,
    NumSymTypes
} SYM_TYPE;

typedef struct _IMAGEHLP_SYMBOL64 {
    DWORD SizeOfStruct;
    DWORD64 Address;
    DWORD Size;
    DWORD Flags;
    DWORD MaxNameLength;
    CHAR Name[1];
} IMAGEHLP_SYMBOL64, *PIMAGEHLP_SYMBOL64;

typedef struct _IMAGEHLP_SYMBOL64_PACKAGE {
    IMAGEHLP_SYMBOL64 sym;
    CHAR name[MAX_SYM_NAME + 1];
} IMAGEHLP_SYMBOL64_PACKAGE, *PIMAGEHLP_SYMBOL64_PACKAGE;

typedef struct _IMAGEHLP_SYMBOLW64 {
    DWORD SizeOfStruct;
    DWORD64 Address;
    DWORD Size;
    DWORD Flags;
    DWORD MaxNameLength;
    WCHAR Name[1];
} IMAGEHLP_SYMBOLW64, *PIMAGEHLP_SYMBOLW64;

typedef struct _IMAGEHLP_SYMBOLW64_PACKAGE {
    IMAGEHLP_SYMBOLW64 sym;
    WCHAR name[MAX_SYM_NAME + 1];
} IMAGEHLP_SYMBOLW64_PACKAGE, *PIMAGEHLP_SYMBOLW64_PACKAGE;

#ifdef _IMAGEHLP64
#define IMAGEHLP_SYMBOL IMAGEHLP_SYMBOL64
#define PIMAGEHLP_SYMBOL PIMAGEHLP_SYMBOL64
#define IMAGEHLP_SYMBOL_PACKAGE IMAGEHLP_SYMBOL64_PACKAGE
#define PIMAGEHLP_SYMBOL_PACKAGE PIMAGEHLP_SYMBOL64_PACKAGE
#define IMAGEHLP_SYMBOLW IMAGEHLP_SYMBOLW64
#define PIMAGEHLP_SYMBOLW PIMAGEHLP_SYMBOLW64
#define IMAGEHLP_SYMBOLW_PACKAGE IMAGEHLP_SYMBOLW64_PACKAGE
#define PIMAGEHLP_SYMBOLW_PACKAGE PIMAGEHLP_SYMBOLW64_PACKAGE
#else /* !_IMAGEHLP64 */
typedef struct _IMAGEHLP_SYMBOL {
    DWORD SizeOfStruct;
    DWORD Address;
    DWORD Size;
    DWORD Flags;
    DWORD MaxNameLength;
    CHAR Name[1];
} IMAGEHLP_SYMBOL, *PIMAGEHLP_SYMBOL;

typedef struct _IMAGEHLP_SYMBOL_PACKAGE {
    IMAGEHLP_SYMBOL sym;
    CHAR name[MAX_SYM_NAME + 1];
} IMAGEHLP_SYMBOL_PACKAGE, *PIMAGEHLP_SYMBOL_PACKAGE;

typedef struct _IMAGEHLP_SYMBOLW {
    DWORD SizeOfStruct;
    DWORD Address;
    DWORD Size;
    DWORD Flags;
    DWORD MaxNameLength;
    WCHAR Name[1];
} IMAGEHLP_SYMBOLW, *PIMAGEHLP_SYMBOLW;

typedef struct _IMAGEHLP_SYMBOLW_PACKAGE {
    IMAGEHLP_SYMBOLW sym;
    WCHAR name[MAX_SYM_NAME + 1];
} IMAGEHLP_SYMBOLW_PACKAGE, *PIMAGEHLP_SYMBOLW_PACKAGE;
#endif /* !_IMAGEHLP64 */

typedef struct _IMAGEHLP_MODULE64 {
    DWORD SizeOfStruct;
    DWORD64 BaseOfImage;
    DWORD ImageSize;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD NumSyms;
    SYM_TYPE SymType;
    CHAR ModuleName[32];
    CHAR ImageName[256];
    CHAR LoadedImageName[256];
    CHAR LoadedPdbName[256];
    DWORD CVSig;
    CHAR CVData[MAX_PATH * 3];
    DWORD PdbSig;
    GUID PdbSig70;
    DWORD PdbAge;
    BOOL PdbUnmatched;
    BOOL DbgUnmatched;
    BOOL LineNumbers;
    BOOL GlobalSymbols;
    BOOL TypeInfo;
    BOOL SourceIndexed;
    BOOL Publics;
} IMAGEHLP_MODULE64, *PIMAGEHLP_MODULE64;

typedef struct _IMAGEHLP_MODULEW64 {
    DWORD SizeOfStruct;
    DWORD64 BaseOfImage;
    DWORD ImageSize;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD NumSyms;
    SYM_TYPE SymType;
    WCHAR ModuleName[32];
    WCHAR ImageName[256];
    WCHAR LoadedImageName[256];
    WCHAR LoadedPdbName[256];
    DWORD CVSig;
    WCHAR CVData[MAX_PATH * 3];
    DWORD PdbSig;
    GUID PdbSig70;
    DWORD PdbAge;
    BOOL PdbUnmatched;
    BOOL DbgUnmatched;
    BOOL LineNumbers;
    BOOL GlobalSymbols;
    BOOL TypeInfo;
    BOOL SourceIndexed;
    BOOL Publics;
} IMAGEHLP_MODULEW64, *PIMAGEHLP_MODULEW64;

#ifdef _IMAGEHLP64
#define IMAGEHLP_MODULE IMAGEHLP_MODULE64
#define PIMAGEHLP_MODULE PIMAGEHLP_MODULE64
#define IMAGEHLP_MODULEW IMAGEHLP_MODULEW64
#define PIMAGEHLP_MODULEW PIMAGEHLP_MODULEW64
#else /* !_IMAGEHLP64 */
typedef struct _IMAGEHLP_MODULE {
    DWORD SizeOfStruct;
    DWORD BaseOfImage;
    DWORD ImageSize;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD NumSyms;
    SYM_TYPE SymType;
    CHAR ModuleName[32];
    CHAR ImageName[256];
    CHAR LoadedImageName[256];
} IMAGEHLP_MODULE, *PIMAGEHLP_MODULE;

typedef struct _IMAGEHLP_MODULEW {
    DWORD SizeOfStruct;
    DWORD BaseOfImage;
    DWORD ImageSize;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD NumSyms;
    SYM_TYPE SymType;
    WCHAR ModuleName[32];
    WCHAR ImageName[256];
    WCHAR LoadedImageName[256];
} IMAGEHLP_MODULEW, *PIMAGEHLP_MODULEW;
#endif /* !_IMAGEHLP64 */

typedef struct _IMAGEHLP_LINE64 {
    DWORD SizeOfStruct;
    PVOID Key;
    DWORD LineNumber;
    PCHAR FileName;
    DWORD64 Address;
} IMAGEHLP_LINE64, *PIMAGEHLP_LINE64;

typedef struct _IMAGEHLP_LINEW64 {
    DWORD SizeOfStruct;
    PVOID Key;
    DWORD LineNumber;
    PWSTR FileName;
    DWORD64 Address;
} IMAGEHLP_LINEW64, *PIMAGEHLP_LINEW64;

#ifdef _IMAGEHLP64
#define IMAGEHLP_LINE IMAGEHLP_LINE64
#define PIMAGEHLP_LINE PIMAGEHLP_LINE64
#else /* !_IMAGEHLP64 */
typedef struct _IMAGEHLP_LINE {
    DWORD SizeOfStruct;
    PVOID Key;
    DWORD LineNumber;
    PCHAR FileName;
    DWORD Address;
} IMAGEHLP_LINE, *PIMAGEHLP_LINE;

typedef struct _IMAGEHLP_LINEW {
    DWORD SizeOfStruct;
    PVOID Key;
    DWORD LineNumber;
    PCHAR FileName;
    DWORD64 Address;
} IMAGEHLP_LINEW, *PIMAGEHLP_LINEW;
#endif /* !_IMAGEHLP64 */

typedef struct _SOURCEFILE {
    DWORD64 ModBase;
    PCHAR FileName;
} SOURCEFILE, *PSOURCEFILE;

typedef struct _SOURCEFILEW {
    DWORD64 ModBase;
    PWSTR FileName;
} SOURCEFILEW, *PSOURCEFILEW;

#define CBA_DEFERRED_SYMBOL_LOAD_START  0x00000001
#define CBA_DEFERRED_SYMBOL_LOAD_COMPLETE  0x00000002
#define CBA_DEFERRED_SYMBOL_LOAD_FAILURE  0x00000003
#define CBA_SYMBOLS_UNLOADED  0x00000004
#define CBA_DUPLICATE_SYMBOL  0x00000005
#define CBA_READ_MEMORY  0x00000006
#define CBA_DEFERRED_SYMBOL_LOAD_CANCEL  0x00000007
#define CBA_SET_OPTIONS  0x00000008
#define CBA_EVENT  0x00000010
#define CBA_DEFERRED_SYMBOL_LOAD_PARTIAL  0x00000020
#define CBA_DEBUG_INFO  0x10000000
#define CBA_SRCSRV_INFO  0x20000000
#define CBA_SRCSRV_EVENT  0x40000000

typedef struct _IMAGEHLP_CBA_READ_MEMORY {
    DWORD64 addr;
    PVOID buf;
    DWORD bytes;
    DWORD *bytesread;
} IMAGEHLP_CBA_READ_MEMORY, *PIMAGEHLP_CBA_READ_MEMORY;

enum {
    sevInfo = 0,
    sevProblem,
    sevAttn,
    sevFatal,
    sevMax
};

#define EVENT_SRCSPEW_START  100
#define EVENT_SRCSPEW  100
#define EVENT_SRCSPEW_END   199

typedef struct _IMAGEHLP_CBA_EVENT {
    DWORD severity;
    DWORD code;
    PCHAR desc;
    PVOID object;
} IMAGEHLP_CBA_EVENT, *PIMAGEHLP_CBA_EVENT;

typedef struct _IMAGEHLP_CBA_EVENTW {
    DWORD severity;
    DWORD code;
    PCWSTR desc;
    PVOID object;
} IMAGEHLP_CBA_EVENTW, *PIMAGEHLP_CBA_EVENTW;

typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD64 {
    DWORD SizeOfStruct;
    DWORD64 BaseOfImage;
    DWORD CheckSum;
    DWORD TimeDateStamp;
    CHAR FileName[MAX_PATH];
    BOOLEAN Reparse;
    HANDLE hFile;
    DWORD Flags;
} IMAGEHLP_DEFERRED_SYMBOL_LOAD64, *PIMAGEHLP_DEFERRED_SYMBOL_LOAD64;

typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOADW64 {
    DWORD SizeOfStruct;
    DWORD64 BaseOfImage;
    DWORD CheckSum;
    DWORD TimeDateStamp;
    WCHAR FileName[MAX_PATH + 1];
    BOOLEAN Reparse;
    HANDLE hFile;
    DWORD Flags;
} IMAGEHLP_DEFERRED_SYMBOL_LOADW64, *PIMAGEHLP_DEFERRED_SYMBOL_LOADW64;

#define DSLFLAG_MISMATCHED_PDB  0x1
#define DSLFLAG_MISMATCHED_DBG  0x2

#ifdef _IMAGEHLP64
#define IMAGEHLP_DEFERRED_SYMBOL_LOAD IMAGEHLP_DEFERRED_SYMBOL_LOAD64
#define PIMAGEHLP_DEFERRED_SYMBOL_LOAD PIMAGEHLP_DEFERRED_SYMBOL_LOAD64
#else /* !_IMAGEHLP64 */
typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD {
    DWORD SizeOfStruct;
    DWORD BaseOfImage;
    DWORD CheckSum;
    DWORD TimeDateStamp;
    CHAR FileName[MAX_PATH];
    BOOLEAN Reparse;
    HANDLE hFile;
} IMAGEHLP_DEFERRED_SYMBOL_LOAD, *PIMAGEHLP_DEFERRED_SYMBOL_LOAD;
#endif /* !_IMAGEHLP64 */

typedef struct _IMAGEHLP_DUPLICATE_SYMBOL64 {
    DWORD SizeOfStruct;
    DWORD NumberOfDups;
    PIMAGEHLP_SYMBOL64 Symbol;
    DWORD SelectedSymbol;
} IMAGEHLP_DUPLICATE_SYMBOL64, *PIMAGEHLP_DUPLICATE_SYMBOL64;

#ifdef _IMAGEHLP64
#define IMAGEHLP_DUPLICATE_SYMBOL IMAGEHLP_DUPLICATE_SYMBOL64
#define PIMAGEHLP_DUPLICATE_SYMBOL PIMAGEHLP_DUPLICATE_SYMBOL64
#else /* !_IMAGEHLP64 */
typedef struct _IMAGEHLP_DUPLICATE_SYMBOL {
    DWORD SizeOfStruct;
    DWORD NumberOfDups;
    PIMAGEHLP_SYMBOL Symbol;
    DWORD SelectedSymbol;
} IMAGEHLP_DUPLICATE_SYMBOL, *PIMAGEHLP_DUPLICATE_SYMBOL;
#endif /* !_IMAGEHLP64 */

BOOL IMAGEAPI SymSetParentWindow(HWND);
PCHAR IMAGEAPI SymSetHomeDirectory(HANDLE, PCSTR);
PWSTR IMAGEAPI SymSetHomeDirectoryW(HANDLE, PCWSTR);
PCHAR IMAGEAPI SymGetHomeDirectory(DWORD, PSTR, size_t);
PWSTR IMAGEAPI SymGetHomeDirectoryW(DWORD, PWSTR, size_t);

enum {
    hdBase = 0,
    hdSym,
    hdSrc,
    hdMax
};

typedef struct _OMAP {
    ULONG rva;
    ULONG rvaTo;
} OMAP, *POMAP;

BOOL IMAGEAPI SymGetOmaps(HANDLE, DWORD64, POMAP *, PDWORD64, POMAP *, PDWORD64);

#define SYMOPT_CASE_INSENSITIVE  0x00000001
#define SYMOPT_UNDNAME  0x00000002
#define SYMOPT_DEFERRED_LOADS  0x00000004
#define SYMOPT_NO_CPP  0x00000008
#define SYMOPT_LOAD_LINES  0x00000010
#define SYMOPT_OMAP_FIND_NEAREST  0x00000020
#define SYMOPT_LOAD_ANYTHING  0x00000040
#define SYMOPT_IGNORE_CVREC  0x00000080
#define SYMOPT_NO_UNQUALIFIED_LOADS  0x00000100
#define SYMOPT_FAIL_CRITICAL_ERRORS  0x00000200
#define SYMOPT_EXACT_SYMBOLS  0x00000400
#define SYMOPT_ALLOW_ABSOLUTE_SYMBOLS  0x00000800
#define SYMOPT_IGNORE_NT_SYMPATH  0x00001000
#define SYMOPT_INCLUDE_32BIT_MODULES  0x00002000
#define SYMOPT_PUBLICS_ONLY  0x00004000
#define SYMOPT_NO_PUBLICS  0x00008000
#define SYMOPT_AUTO_PUBLICS  0x00010000
#define SYMOPT_NO_IMAGE_SEARCH  0x00020000
#define SYMOPT_SECURE  0x00040000
#define SYMOPT_NO_PROMPTS  0x00080000
#define SYMOPT_OVERWRITE  0x00100000
#define SYMOPT_IGNORE_IMAGEDIR  0x00200000
#define SYMOPT_FLAT_DIRECTORY  0x00400000
#define SYMOPT_FAVOR_COMPRESSED  0x00800000
#define SYMOPT_ALLOW_ZERO_ADDRESS  0x01000000
#define SYMOPT_DISABLE_SYMSRV_AUTODETECT  0x02000000
#define SYMOPT_DEBUG  0x80000000

DWORD IMAGEAPI SymSetOptions(DWORD);
DWORD IMAGEAPI SymGetOptions(VOID);
BOOL IMAGEAPI SymCleanup(HANDLE);
BOOL IMAGEAPI SymMatchString(PCSTR, PCSTR, BOOL);
BOOL IMAGEAPI SymMatchStringA(PCSTR, PCSTR, BOOL);
BOOL IMAGEAPI SymMatchStringW(PCWSTR, PCWSTR, BOOL);

typedef BOOL (CALLBACK *PSYM_ENUMSOURCEFILES_CALLBACK)(PSOURCEFILE, PVOID);
typedef BOOL(CALLBACK *PSYM_ENUMSOURCEFILES_CALLBACKW) (PSOURCEFILEW, PVOID);
#define PSYM_ENUMSOURCFILES_CALLBACK  PSYM_ENUMSOURCEFILES_CALLBACK

BOOL IMAGEAPI SymEnumSourceFiles(HANDLE, ULONG64, PCSTR, PSYM_ENUMSOURCEFILES_CALLBACK, PVOID);
BOOL IMAGEAPI SymEnumSourceFilesW(HANDLE, ULONG64, PCWSTR, PSYM_ENUMSOURCEFILES_CALLBACKW, PVOID);
BOOL IMAGEAPI SymEnumerateModules64(HANDLE, PSYM_ENUMMODULES_CALLBACK64, PVOID);
BOOL IMAGEAPI SymEnumerateModulesW64(HANDLE, PSYM_ENUMMODULES_CALLBACKW64, PVOID);

#ifdef _IMAGEHLP64
#define SymEnumerateModules SymEnumerateModules64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymEnumerateModules(HANDLE, PSYM_ENUMMODULES_CALLBACK, PVOID);
#endif /* !_IMAGEHLP64 */

BOOL IMAGEAPI EnumerateLoadedModulesEx(HANDLE, PENUMLOADED_MODULES_CALLBACK64, PVOID);
BOOL IMAGEAPI EnumerateLoadedModulesExW(HANDLE, PENUMLOADED_MODULES_CALLBACKW64, PVOID);
BOOL IMAGEAPI EnumerateLoadedModules64(HANDLE, PENUMLOADED_MODULES_CALLBACK64, PVOID);
BOOL IMAGEAPI EnumerateLoadedModulesW64(HANDLE, PENUMLOADED_MODULES_CALLBACKW64, PVOID);

#ifdef _IMAGEHLP64
#define EnumerateLoadedModules EnumerateLoadedModules64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI EnumerateLoadedModules(HANDLE, PENUMLOADED_MODULES_CALLBACK, PVOID);
#endif /* !_IMAGEHLP64 */

PVOID IMAGEAPI SymFunctionTableAccess64(HANDLE, DWORD64);

#ifdef _IMAGEHLP64
#define SymFunctionTableAccess SymFunctionTableAccess64
#else /* !_IMAGEHLP64 */
PVOID IMAGEAPI SymFunctionTableAccess(HANDLE, DWORD);
#endif /* !_IMAGEHLP64 */

BOOL IMAGEAPI SymGetUnwindInfo(HANDLE, DWORD64, PVOID, PULONG);
BOOL IMAGEAPI SymGetModuleInfo64(HANDLE, DWORD64, PIMAGEHLP_MODULE64);
BOOL IMAGEAPI SymGetModuleInfoW64(HANDLE, DWORD64, PIMAGEHLP_MODULEW64);

#ifdef _IMAGEHLP64
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymGetModuleInfo(HANDLE, DWORD, PIMAGEHLP_MODULE);
BOOL IMAGEAPI SymGetModuleInfoW(HANDLE, DWORD, PIMAGEHLP_MODULEW);
#endif /* !_IMAGEHLP64 */

DWORD64 IMAGEAPI SymGetModuleBase64(HANDLE, DWORD64);

#ifdef _IMAGEHLP64
#define SymGetModuleBase SymGetModuleBase64
#else /* !_IMAGEHLP64 */
DWORD IMAGEAPI SymGetModuleBase(HANDLE, DWORD);
#endif /* !_IMAGEHLP64 */

typedef struct _SRCCODEINFO {
    DWORD SizeOfStruct;
    PVOID Key;
    DWORD64 ModBase;
    CHAR Obj[MAX_PATH + 1];
    CHAR FileName[MAX_PATH + 1];
    DWORD LineNumber;
    DWORD64 Address;
} SRCCODEINFO, *PSRCCODEINFO;

typedef struct _SRCCODEINFOW {
    DWORD SizeOfStruct;
    PVOID Key;
    DWORD64 ModBase;
    WCHAR Obj[MAX_PATH + 1];
    WCHAR FileName[MAX_PATH + 1];
    DWORD LineNumber;
    DWORD64 Address;
} SRCCODEINFOW, *PSRCCODEINFOW;

typedef BOOL(CALLBACK *PSYM_ENUMLINES_CALLBACK)(PSRCCODEINFO, PVOID);
typedef BOOL(CALLBACK *PSYM_ENUMLINES_CALLBACKW)(PSRCCODEINFOW, PVOID);

BOOL IMAGEAPI SymEnumLines(HANDLE, ULONG64, PCSTR, PCSTR, PSYM_ENUMLINES_CALLBACK, PVOID);
BOOL IMAGEAPI SymEnumLinesW(HANDLE, ULONG64, PCWSTR, PCWSTR, PSYM_ENUMLINES_CALLBACKW, PVOID);
BOOL IMAGEAPI SymGetLineFromAddr64(HANDLE, DWORD64, PDWORD, PIMAGEHLP_LINE64);
BOOL IMAGEAPI SymGetLineFromAddrW64(HANDLE, DWORD64, PDWORD, PIMAGEHLP_LINEW64);
BOOL IMAGEAPI SymEnumSourceLines(HANDLE, ULONG64, PCSTR, PCSTR, DWORD, DWORD, PSYM_ENUMLINES_CALLBACK, PVOID);
BOOL IMAGEAPI SymEnumSourceLinesW(HANDLE, ULONG64, PCWSTR, PCWSTR, DWORD, DWORD, PSYM_ENUMLINES_CALLBACKW, PVOID);

#define ESLFLAG_FULLPATH  0x1
#define ESLFLAG_NEAREST  0x2
#define ESLFLAG_PREV  0x4
#define ESLFLAG_NEXT  0x8

#ifdef _IMAGEHLP64
#define SymGetLineFromAddr SymGetLineFromAddr64
#define SymGetLineFromAddrW SymGetLineFromAddrW64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymGetLineFromAddr(HANDLE, DWORD, PDWORD, PIMAGEHLP_LINE);
BOOL IMAGEAPI SymGetLineFromAddrW(HANDLE, DWORD, PDWORD, PIMAGEHLP_LINEW);
#endif /* !_IMAGEHLP64 */

BOOL IMAGEAPI SymGetLineFromName64(HANDLE, PCSTR, PCSTR, DWORD, PLONG, PIMAGEHLP_LINE64);
BOOL IMAGEAPI SymGetLineFromNameW64(HANDLE, PCWSTR, PCWSTR, DWORD, PLONG, PIMAGEHLP_LINEW64);

#ifdef _IMAGEHLP64
#define SymGetLineFromName SymGetLineFromName64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymGetLineFromName(HANDLE, PCSTR, PCSTR, DWORD, PLONG, PIMAGEHLP_LINE);
#endif /* !_IMAGEHLP64 */

BOOL IMAGEAPI SymGetLineNext64(HANDLE, PIMAGEHLP_LINE64);
BOOL IMAGEAPI SymGetLineNextW64(HANDLE, PIMAGEHLP_LINEW64);

#ifdef _IMAGEHLP64
#define SymGetLineNext SymGetLineNext64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymGetLineNext(HANDLE, PIMAGEHLP_LINE);
BOOL IMAGEAPI SymGetLineNextW(HANDLE, PIMAGEHLP_LINEW);
#endif /* !_IMAGEHLP64 */

BOOL IMAGEAPI SymGetLinePrev64(HANDLE, PIMAGEHLP_LINE64);
BOOL IMAGEAPI SymGetLinePrevW64(HANDLE, PIMAGEHLP_LINEW64);

#ifdef _IMAGEHLP64
#define SymGetLinePrev SymGetLinePrev64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymGetLinePrev(HANDLE, PIMAGEHLP_LINE);
BOOL IMAGEAPI SymGetLinePrevW(HANDLE, PIMAGEHLP_LINEW);
#endif /* !_IMAGEHLP64 */

ULONG IMAGEAPI SymGetFileLineOffsets64(HANDLE, PCSTR, PCSTR, PDWORD64, ULONG);
BOOL IMAGEAPI SymMatchFileName(PCSTR, PCSTR, PSTR *, PSTR *);
BOOL IMAGEAPI SymMatchFileNameW(PCWSTR, PCWSTR, PWSTR *, PWSTR *);
BOOL IMAGEAPI SymGetSourceFile(HANDLE, ULONG64, PCSTR, PCSTR, PSTR, DWORD);
BOOL IMAGEAPI SymGetSourceFileW(HANDLE, ULONG64, PCWSTR, PCWSTR, PWSTR, DWORD);
BOOL IMAGEAPI SymGetSourceFileToken(HANDLE, ULONG64, PCSTR, PVOID *, DWORD *);
BOOL IMAGEAPI SymGetSourceFileTokenW(HANDLE, ULONG64, PCWSTR, PVOID *, DWORD *);
BOOL IMAGEAPI SymGetSourceFileFromToken(HANDLE, PVOID, PCSTR, PSTR, DWORD);
BOOL IMAGEAPI SymGetSourceFileFromTokenW(HANDLE, PVOID, PCWSTR, PWSTR, DWORD);
BOOL IMAGEAPI SymGetSourceVarFromToken(HANDLE, PVOID, PCSTR, PCSTR, PSTR, DWORD);
BOOL IMAGEAPI SymGetSourceVarFromTokenW(HANDLE, PVOID, PCWSTR, PCWSTR, PWSTR, DWORD);

typedef BOOL (CALLBACK *PENUMSOURCEFILETOKENSCALLBACK)(PVOID, size_t);

BOOL IMAGEAPI SymEnumSourceFileTokens(HANDLE, ULONG64, PENUMSOURCEFILETOKENSCALLBACK);
BOOL IMAGEAPI SymInitialize(HANDLE, PCSTR, BOOL);
BOOL IMAGEAPI SymInitializeW(HANDLE, PCWSTR, BOOL);
BOOL IMAGEAPI SymGetSearchPath(HANDLE, PSTR, DWORD);
BOOL IMAGEAPI SymGetSearchPathW(HANDLE, PWSTR, DWORD);
BOOL IMAGEAPI SymSetSearchPath(HANDLE, PCSTR);
BOOL IMAGEAPI SymSetSearchPathW(HANDLE, PCWSTR);

#define SLMFLAG_VIRTUAL  0x1
#define SLMFLAG_ALT_INDEX  0x2
#define SLMFLAG_NO_SYMBOLS  0x4

DWORD64 IMAGEAPI SymLoadModuleEx(HANDLE, HANDLE, PCSTR, PCSTR, DWORD64, DWORD, PMODLOAD_DATA, DWORD);
DWORD64 IMAGEAPI SymLoadModuleExW(HANDLE, HANDLE, PCWSTR, PCWSTR, DWORD64, DWORD, PMODLOAD_DATA, DWORD);
BOOL IMAGEAPI SymUnloadModule64(HANDLE, DWORD64);

#ifdef _IMAGEHLP64
#define SymUnloadModule SymUnloadModule64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymUnloadModule(HANDLE, DWORD);
#endif /* !_IMAGEHLP64 */

BOOL IMAGEAPI SymUnDName64(PIMAGEHLP_SYMBOL64, PSTR, DWORD);

#ifdef _IMAGEHLP64
#define SymUnDName SymUnDName64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymUnDName(PIMAGEHLP_SYMBOL, PSTR, DWORD);
#endif /* !_IMAGEHLP64 */

BOOL IMAGEAPI SymRegisterCallback64(HANDLE, PSYMBOL_REGISTERED_CALLBACK64, ULONG64);
BOOL IMAGEAPI SymRegisterCallbackW64(HANDLE, PSYMBOL_REGISTERED_CALLBACK64, ULONG64);
BOOL IMAGEAPI SymRegisterFunctionEntryCallback64(HANDLE, PSYMBOL_FUNCENTRY_CALLBACK64, ULONG64);

#ifdef _IMAGEHLP64
#define SymRegisterCallback SymRegisterCallback64
#define SymRegisterFunctionEntryCallback SymRegisterFunctionEntryCallback64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymRegisterCallback(HANDLE, PSYMBOL_REGISTERED_CALLBACK, PVOID);
BOOL IMAGEAPI SymRegisterFunctionEntryCallback(HANDLE, PSYMBOL_FUNCENTRY_CALLBACK, PVOID);
#endif /* !_IMAGEHLP64 */

typedef struct _IMAGEHLP_SYMBOL_SRC {
    DWORD sizeofstruct;
    DWORD type;
    char file[MAX_PATH];
} IMAGEHLP_SYMBOL_SRC, *PIMAGEHLP_SYMBOL_SRC;

typedef struct _MODULE_TYPE_INFO {
    USHORT dataLength;
    USHORT leaf;
    BYTE data[1];
} MODULE_TYPE_INFO, *PMODULE_TYPE_INFO;

typedef struct _SYMBOL_INFO {
    ULONG SizeOfStruct;
    ULONG TypeIndex;
    ULONG64 Reserved[2];
    ULONG Index;
    ULONG Size;
    ULONG64 ModBase;
    ULONG Flags;
    ULONG64 Value;
    ULONG64 Address;
    ULONG Register;
    ULONG Scope;
    ULONG Tag;
    ULONG NameLen;
    ULONG MaxNameLen;
    CHAR Name[1];
} SYMBOL_INFO, *PSYMBOL_INFO;

typedef struct _SYMBOL_INFO_PACKAGE {
    SYMBOL_INFO si;
    CHAR name[MAX_SYM_NAME + 1];
} SYMBOL_INFO_PACKAGE, *PSYMBOL_INFO_PACKAGE;

typedef struct _SYMBOL_INFOW {
    ULONG SizeOfStruct;
    ULONG TypeIndex;
    ULONG64 Reserved[2];
    ULONG Index;
    ULONG Size;
    ULONG64 ModBase;
    ULONG Flags;
    ULONG64 Value;
    ULONG64 Address;
    ULONG Register;
    ULONG Scope;
    ULONG Tag;
    ULONG NameLen;
    ULONG MaxNameLen;
    WCHAR Name[1];
} SYMBOL_INFOW, *PSYMBOL_INFOW;

typedef struct _SYMBOL_INFO_PACKAGEW {
    SYMBOL_INFOW si;
    WCHAR name[MAX_SYM_NAME + 1];
} SYMBOL_INFO_PACKAGEW, *PSYMBOL_INFO_PACKAGEW;

typedef struct _IMAGEHLP_STACK_FRAME {
    ULONG64 InstructionOffset;
    ULONG64 ReturnOffset;
    ULONG64 FrameOffset;
    ULONG64 StackOffset;
    ULONG64 BackingStoreOffset;
    ULONG64 FuncTableEntry;
    ULONG64 Params[4];
    ULONG64 Reserved[5];
    BOOL Virtual;
    ULONG Reserved2;
} IMAGEHLP_STACK_FRAME, *PIMAGEHLP_STACK_FRAME;

typedef VOID IMAGEHLP_CONTEXT, *PIMAGEHLP_CONTEXT;

BOOL IMAGEAPI SymSetContext(HANDLE, PIMAGEHLP_STACK_FRAME, PIMAGEHLP_CONTEXT);
BOOL IMAGEAPI SymSetScopeFromAddr(HANDLE, ULONG64);
BOOL IMAGEAPI SymSetScopeFromIndex(HANDLE, ULONG64, DWORD);

typedef BOOL(CALLBACK *PSYM_ENUMPROCESSES_CALLBACK) (HANDLE, PVOID);

BOOL IMAGEAPI SymEnumProcesses(PSYM_ENUMPROCESSES_CALLBACK, PVOID);
BOOL IMAGEAPI SymFromAddr(HANDLE, DWORD64, PDWORD64, PSYMBOL_INFO);
BOOL IMAGEAPI SymFromAddrW(HANDLE, DWORD64, PDWORD64, PSYMBOL_INFOW);
BOOL IMAGEAPI SymFromToken(HANDLE, DWORD64, DWORD, PSYMBOL_INFO);
BOOL IMAGEAPI SymFromTokenW(HANDLE, DWORD64, DWORD, PSYMBOL_INFOW);
BOOL IMAGEAPI SymNext(HANDLE, PSYMBOL_INFO);
BOOL IMAGEAPI SymNextW(HANDLE, PSYMBOL_INFOW);
BOOL IMAGEAPI SymPrev(HANDLE, PSYMBOL_INFO);
BOOL IMAGEAPI SymPrevW(HANDLE, PSYMBOL_INFOW);
BOOL IMAGEAPI SymFromName(HANDLE, PCSTR, PSYMBOL_INFO);
BOOL IMAGEAPI SymFromNameW(HANDLE, PCWSTR, PSYMBOL_INFOW);

typedef BOOL(CALLBACK *PSYM_ENUMERATESYMBOLS_CALLBACK) (PSYMBOL_INFO, ULONG, PVOID);

BOOL IMAGEAPI SymEnumSymbols(HANDLE, ULONG64, PCSTR, PSYM_ENUMERATESYMBOLS_CALLBACK, PVOID);

typedef BOOL(CALLBACK *PSYM_ENUMERATESYMBOLS_CALLBACKW) (PSYMBOL_INFOW, ULONG, PVOID);

BOOL IMAGEAPI SymEnumSymbolsW(HANDLE, ULONG64, PCWSTR, PSYM_ENUMERATESYMBOLS_CALLBACKW, PVOID);
BOOL IMAGEAPI SymEnumSymbolsForAddr(HANDLE, DWORD64, PSYM_ENUMERATESYMBOLS_CALLBACK, PVOID);
BOOL IMAGEAPI SymEnumSymbolsForAddrW(HANDLE, DWORD64, PSYM_ENUMERATESYMBOLS_CALLBACKW, PVOID);

#define SYMSEARCH_MASKOBJS  0x01
#define SYMSEARCH_RECURSE  0X02
#define SYMSEARCH_GLOBALSONLY  0X04
#define SYMSEARCH_ALLITEMS  0X08

BOOL IMAGEAPI SymSearch(HANDLE, ULONG64, DWORD, DWORD, PCSTR, DWORD64, PSYM_ENUMERATESYMBOLS_CALLBACK, PVOID, DWORD);
BOOL IMAGEAPI SymSearchW(HANDLE, ULONG64, DWORD, DWORD, PCWSTR, DWORD64, PSYM_ENUMERATESYMBOLS_CALLBACKW, PVOID, DWORD);
BOOL IMAGEAPI SymGetScope(HANDLE, ULONG64, DWORD, PSYMBOL_INFO);
BOOL IMAGEAPI SymGetScopeW(HANDLE, ULONG64, DWORD, PSYMBOL_INFOW);
BOOL IMAGEAPI SymFromIndex(HANDLE, ULONG64, DWORD, PSYMBOL_INFO);
BOOL IMAGEAPI SymFromIndexW(HANDLE, ULONG64, DWORD, PSYMBOL_INFOW);

typedef enum _IMAGEHLP_SYMBOL_TYPE_INFO {
    TI_GET_SYMTAG,
    TI_GET_SYMNAME,
    TI_GET_LENGTH,
    TI_GET_TYPE,
    TI_GET_TYPEID,
    TI_GET_BASETYPE,
    TI_GET_ARRAYINDEXTYPEID,
    TI_FINDCHILDREN,
    TI_GET_DATAKIND,
    TI_GET_ADDRESSOFFSET,
    TI_GET_OFFSET,
    TI_GET_VALUE,
    TI_GET_COUNT,
    TI_GET_CHILDRENCOUNT,
    TI_GET_BITPOSITION,
    TI_GET_VIRTUALBASECLASS,
    TI_GET_VIRTUALTABLESHAPEID,
    TI_GET_VIRTUALBASEPOINTEROFFSET,
    TI_GET_CLASSPARENTID,
    TI_GET_NESTED,
    TI_GET_SYMINDEX,
    TI_GET_LEXICALPARENT,
    TI_GET_ADDRESS,
    TI_GET_THISADJUST,
    TI_GET_UDTKIND,
    TI_IS_EQUIV_TO,
    TI_GET_CALLING_CONVENTION,
    TI_IS_CLOSE_EQUIV_TO,
    TI_GTIEX_REQS_VALID,
    TI_GET_VIRTUALBASEOFFSET,
    TI_GET_VIRTUALBASEDISPINDEX,
    TI_GET_IS_REFERENCE,
    TI_GET_INDIRECTVIRTUALBASECLASS,
    IMAGEHLP_SYMBOL_TYPE_INFO_MAX,
} IMAGEHLP_SYMBOL_TYPE_INFO;

typedef struct _TI_FINDCHILDREN_PARAMS {
    ULONG Count;
    ULONG Start;
    ULONG ChildId[1];
} TI_FINDCHILDREN_PARAMS;

BOOL IMAGEAPI SymGetTypeInfo(HANDLE, DWORD64, ULONG, IMAGEHLP_SYMBOL_TYPE_INFO, PVOID);

#define IMAGEHLP_GET_TYPE_INFO_UNCACHED 0x00000001
#define IMAGEHLP_GET_TYPE_INFO_CHILDREN 0x00000002

typedef struct _IMAGEHLP_GET_TYPE_INFO_PARAMS {
    ULONG SizeOfStruct;
    ULONG Flags;
    ULONG NumIds;
    PULONG TypeIds;
    ULONG64 TagFilter;
    ULONG NumReqs;
    IMAGEHLP_SYMBOL_TYPE_INFO *ReqKinds;
    PULONG_PTR ReqOffsets;
    PULONG ReqSizes;
    ULONG_PTR ReqStride;
    ULONG_PTR BufferSize;
    PVOID Buffer;
    ULONG EntriesMatched;
    ULONG EntriesFilled;
    ULONG64 TagsFound;
    ULONG64 AllReqsValid;
    ULONG NumReqsValid;
    PULONG64 ReqsValid;
} IMAGEHLP_GET_TYPE_INFO_PARAMS, *PIMAGEHLP_GET_TYPE_INFO_PARAMS;

typedef BOOL (WINAPI *SYMADDSOURCESTREAM)(HANDLE, ULONG64, PCSTR, PBYTE, size_t);
typedef BOOL (WINAPI *SYMADDSOURCESTREAMA)(HANDLE, ULONG64, PCSTR, PBYTE, size_t);

BOOL IMAGEAPI SymGetTypeInfoEx(HANDLE, DWORD64, PIMAGEHLP_GET_TYPE_INFO_PARAMS);
BOOL IMAGEAPI SymEnumTypes(HANDLE, ULONG64, PSYM_ENUMERATESYMBOLS_CALLBACK, PVOID);
BOOL IMAGEAPI SymEnumTypesW(HANDLE, ULONG64, PSYM_ENUMERATESYMBOLS_CALLBACKW, PVOID);
BOOL IMAGEAPI SymEnumTypesByName(HANDLE, ULONG64, PCSTR, PSYM_ENUMERATESYMBOLS_CALLBACK, PVOID);
BOOL IMAGEAPI SymEnumTypesByNameW(HANDLE, ULONG64, PCWSTR, PSYM_ENUMERATESYMBOLS_CALLBACKW, PVOID);
BOOL IMAGEAPI SymGetTypeFromName(HANDLE, ULONG64, PCSTR, PSYMBOL_INFO);
BOOL IMAGEAPI SymGetTypeFromNameW(HANDLE, ULONG64, PCWSTR, PSYMBOL_INFOW);
BOOL IMAGEAPI SymAddSymbol(HANDLE, ULONG64, PCSTR, DWORD64, DWORD, DWORD);
BOOL IMAGEAPI SymAddSymbolW(HANDLE, ULONG64, PCWSTR, DWORD64, DWORD, DWORD);
BOOL IMAGEAPI SymDeleteSymbol(HANDLE, ULONG64, PCSTR, DWORD64, DWORD);
BOOL IMAGEAPI SymDeleteSymbolW(HANDLE, ULONG64, PCWSTR, DWORD64, DWORD);
BOOL IMAGEAPI SymRefreshModuleList(HANDLE);
BOOL IMAGEAPI SymAddSourceStream(HANDLE, ULONG64, PCSTR, PBYTE, size_t);
BOOL IMAGEAPI SymAddSourceStreamA(HANDLE, ULONG64, PCSTR, PBYTE, size_t);
BOOL IMAGEAPI SymAddSourceStreamW(HANDLE, ULONG64, PCWSTR, PBYTE, size_t);
BOOL IMAGEAPI SymSrvIsStoreW(HANDLE, PCWSTR);
BOOL IMAGEAPI SymSrvIsStore(HANDLE, PCSTR);
PCSTR IMAGEAPI SymSrvDeltaName(HANDLE, PCSTR, PCSTR, PCSTR, PCSTR);
PCWSTR IMAGEAPI SymSrvDeltaNameW(HANDLE, PCWSTR, PCWSTR, PCWSTR, PCWSTR);
PCSTR IMAGEAPI SymSrvGetSupplement(HANDLE, PCSTR, PCSTR, PCSTR);
PCWSTR IMAGEAPI SymSrvGetSupplementW(HANDLE, PCWSTR, PCWSTR, PCWSTR);
BOOL IMAGEAPI SymSrvGetFileIndexes(PCSTR, GUID *, PDWORD, PDWORD, DWORD);
BOOL IMAGEAPI SymSrvGetFileIndexesW(PCWSTR, GUID *, PDWORD, PDWORD, DWORD);
BOOL IMAGEAPI SymSrvGetFileIndexStringW(HANDLE, PCWSTR, PCWSTR, PWSTR, size_t, DWORD);
BOOL IMAGEAPI SymSrvGetFileIndexString(HANDLE, PCSTR, PCSTR, PSTR, size_t, DWORD);

typedef struct {
    DWORD sizeofstruct;
    char file[MAX_PATH + 1];
    BOOL stripped;
    DWORD timestamp;
    DWORD size;
    char dbgfile[MAX_PATH + 1];
    char pdbfile[MAX_PATH + 1];
    GUID guid;
    DWORD sig;
    DWORD age;
} SYMSRV_INDEX_INFO, *PSYMSRV_INDEX_INFO;

typedef struct {
    DWORD sizeofstruct;
    WCHAR file[MAX_PATH + 1];
    BOOL stripped;
    DWORD timestamp;
    DWORD size;
    WCHAR dbgfile[MAX_PATH + 1];
    WCHAR pdbfile[MAX_PATH + 1];
    GUID guid;
    DWORD sig;
    DWORD age;
} SYMSRV_INDEX_INFOW, *PSYMSRV_INDEX_INFOW;

BOOL IMAGEAPI SymSrvGetFileIndexInfo(PCSTR, PSYMSRV_INDEX_INFO, DWORD);
BOOL IMAGEAPI SymSrvGetFileIndexInfoW(PCWSTR, PSYMSRV_INDEX_INFOW, DWORD);
PCSTR IMAGEAPI SymSrvStoreSupplement(HANDLE, PCSTR, PCSTR, PCSTR, DWORD);
PCWSTR IMAGEAPI SymSrvStoreSupplementW(HANDLE, PCWSTR, PCWSTR, PCWSTR, DWORD);
PCSTR IMAGEAPI SymSrvStoreFile(HANDLE, PCSTR, PCSTR, DWORD);
PCWSTR IMAGEAPI SymSrvStoreFileW(HANDLE, PCWSTR, PCWSTR, DWORD);

enum {
    sfImage = 0,
    sfDbg,
    sfPdb,
    sfMpd,
    sfMax
};

typedef BOOL(WINAPI *PDBGHELP_CREATE_USER_DUMP_CALLBACK) (DWORD, PVOID *, LPDWORD, PVOID);

BOOL IMAGEAPI SymGetSymbolFile(HANDLE, PCSTR, PCSTR, DWORD, PSTR, size_t, PSTR, size_t);
BOOL IMAGEAPI SymGetSymbolFileW(HANDLE, PCWSTR, PCWSTR, DWORD, PWSTR, size_t, PWSTR, size_t);
BOOL WINAPI DbgHelpCreateUserDump(LPCSTR, PDBGHELP_CREATE_USER_DUMP_CALLBACK, PVOID);
BOOL WINAPI DbgHelpCreateUserDumpW(LPCWSTR, PDBGHELP_CREATE_USER_DUMP_CALLBACK, PVOID);
BOOL IMAGEAPI SymGetSymFromAddr64(HANDLE, DWORD64, PDWORD64, PIMAGEHLP_SYMBOL64);

#ifdef _IMAGEHLP64
#define SymGetSymFromAddr SymGetSymFromAddr64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymGetSymFromAddr(HANDLE, DWORD, PDWORD, PIMAGEHLP_SYMBOL);
#endif /* !_IMAGEHLP64 */

BOOL IMAGEAPI SymGetSymFromName64(HANDLE, PCSTR, PIMAGEHLP_SYMBOL64);

#ifdef _IMAGEHLP64
#define SymGetSymFromName SymGetSymFromName64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymGetSymFromName(HANDLE, PCSTR, PIMAGEHLP_SYMBOL);
#endif /* !_IMAGEHLP64 */

typedef BOOL (WINAPI *PSYMBOLSERVERPROC)(PCSTR, PCSTR, PVOID, DWORD, DWORD, PSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERPROCA)(PCSTR, PCSTR, PVOID, DWORD, DWORD, PSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERPROCW)(PCWSTR, PCWSTR, PVOID, DWORD, DWORD, PWSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERBYINDEXPROC)(PCSTR, PCSTR, PCSTR, PSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERBYINDEXPROCA)(PCSTR, PCSTR, PCSTR, PSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERBYINDEXPROCW)(PCWSTR, PCWSTR, PCWSTR, PWSTR);
typedef BOOL (WINAPI *PSYMBOLSERVEROPENPROC)(VOID);
typedef BOOL (WINAPI *PSYMBOLSERVERCLOSEPROC)(VOID);
typedef BOOL (WINAPI *PSYMBOLSERVERSETOPTIONSPROC)(UINT_PTR, ULONG64);
typedef BOOL (WINAPI *PSYMBOLSERVERSETOPTIONSWPROC)(UINT_PTR, ULONG64);
typedef BOOL (CALLBACK WINAPI *PSYMBOLSERVERCALLBACKPROC)(UINT_PTR action, ULONG64 data, ULONG64 context);
typedef UINT_PTR (WINAPI *PSYMBOLSERVERGETOPTIONSPROC)(void);
typedef BOOL (WINAPI *PSYMBOLSERVERPINGPROC)(PCSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERPINGPROCA)(PCSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERPINGPROCW)(PCWSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERGETVERSION)(LPAPI_VERSION);
typedef BOOL (WINAPI *PSYMBOLSERVERDELTANAME)(PCSTR, PVOID, DWORD, DWORD, PVOID, DWORD, DWORD, PSTR, size_t);
typedef BOOL (WINAPI *PSYMBOLSERVERDELTANAMEW)(PCWSTR, PVOID, DWORD, DWORD, PVOID, DWORD, DWORD, PWSTR, size_t);
typedef BOOL (WINAPI *PSYMBOLSERVERGETSUPPLEMENT)(PCSTR, PCSTR, PCSTR, PSTR, size_t);
typedef BOOL (WINAPI *PSYMBOLSERVERGETSUPPLEMENTW)(PCWSTR, PCWSTR, PCWSTR, PWSTR, size_t);
typedef BOOL (WINAPI *PSYMBOLSERVERSTORESUPPLEMENT)(PCSTR, PCSTR, PCSTR, PSTR, size_t, DWORD);
typedef BOOL (WINAPI *PSYMBOLSERVERSTORESUPPLEMENTW)(PCWSTR, PCWSTR, PCWSTR, PWSTR, size_t, DWORD);
typedef BOOL (WINAPI *PSYMBOLSERVERGETINDEXSTRING)(PVOID, DWORD, DWORD, PSTR, size_t);
typedef BOOL (WINAPI *PSYMBOLSERVERGETINDEXSTRINGW)(PVOID, DWORD, DWORD, PWSTR, size_t);
typedef BOOL (WINAPI *PSYMBOLSERVERSTOREFILE)(PCSTR, PCSTR, PVOID, DWORD, DWORD, PSTR, size_t, DWORD);
typedef BOOL (WINAPI *PSYMBOLSERVERSTOREFILEW)(PCWSTR, PCWSTR, PVOID, DWORD, DWORD, PWSTR, size_t, DWORD);
typedef BOOL (WINAPI *PSYMBOLSERVERISSTORE)(PCSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERISSTOREW)(PCWSTR);
typedef DWORD (WINAPI *PSYMBOLSERVERVERSION)(void);
typedef BOOL (CALLBACK WINAPI *PSYMBOLSERVERMESSAGEPROC)(UINT_PTR action, ULONG64 data, ULONG64 context);

#define SYMSRV_VERSION  2

#define SSRVOPT_CALLBACK  0x00000001
#define SSRVOPT_DWORD  0x00000002
#define SSRVOPT_DWORDPTR  0x00000004
#define SSRVOPT_GUIDPTR  0x00000008
#define SSRVOPT_OLDGUIDPTR  0x00000010
#define SSRVOPT_UNATTENDED  0x00000020
#define SSRVOPT_NOCOPY  0x00000040
#define SSRVOPT_GETPATH  0x00000040
#define SSRVOPT_PARENTWIN  0x00000080
#define SSRVOPT_PARAMTYPE  0x00000100
#define SSRVOPT_SECURE  0x00000200
#define SSRVOPT_TRACE  0x00000400
#define SSRVOPT_SETCONTEXT  0x00000800
#define SSRVOPT_PROXY  0x00001000
#define SSRVOPT_DOWNSTREAM_STORE  0x00002000
#define SSRVOPT_OVERWRITE  0x00004000
#define SSRVOPT_RESETTOU  0x00008000
#define SSRVOPT_CALLBACKW  0x00010000
#define SSRVOPT_FLAT_DEFAULT_STORE  0x00020000
#define SSRVOPT_PROXYW  0x00040000
#define SSRVOPT_MESSAGE  0x00080000
#define SSRVOPT_SERVICE  0x00100000
#define SSRVOPT_FAVOR_COMPRESSED  0x00200000
#define SSRVOPT_STRING  0x00400000
#define SSRVOPT_WINHTTP  0x00800000
#define SSRVOPT_WININET  0x01000000

#define SSRVOPT_MAX  0x0100000

#define SSRVOPT_RESET  ((ULONG_PTR)-1)


#define NUM_SSRVOPTS  30

#define SSRVACTION_TRACE  1
#define SSRVACTION_QUERYCANCEL  2
#define SSRVACTION_EVENT  3
#define SSRVACTION_EVENTW  4
#define SSRVACTION_SIZE  5

#define SYMSTOREOPT_COMPRESS  0x01
#define SYMSTOREOPT_OVERWRITE  0x02
#define SYMSTOREOPT_RETURNINDEX  0x04
#define SYMSTOREOPT_POINTER  0x08
#define SYMSTOREOPT_ALT_INDEX  0x10
#define SYMSTOREOPT_UNICODE  0x20
#define SYMSTOREOPT_PASS_IF_EXISTS  0x40

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymInitialize  SymInitializeW
#define SymAddSymbol  SymAddSymbolW
#define SymDeleteSymbol  SymDeleteSymbolW
#define SearchTreeForFile  SearchTreeForFileW
#define UnDecorateSymbolName  UnDecorateSymbolNameW
#define SymGetLineFromName64  SymGetLineFromNameW64
#define SymGetLineFromAddr64  SymGetLineFromAddrW64
#define SymGetLineNext64  SymGetLineNextW64
#define SymGetLinePrev64  SymGetLinePrevW64
#define SymFromName  SymFromNameW
#define SymFindExecutableImage  SymFindExecutableImageW
#define FindExecutableImageEx  FindExecutableImageExW
#define SymSearch  SymSearchW
#define SymEnumLines  SymEnumLinesW
#define SymEnumSourceLines  SymEnumSourceLinesW
#define SymGetTypeFromName  SymGetTypeFromNameW
#define SymEnumSymbolsForAddr  SymEnumSymbolsForAddrW
#define SymFromAddr  SymFromAddrW
#define SymMatchString  SymMatchStringW
#define SymEnumSourceFiles  SymEnumSourceFilesW
#define SymEnumSymbols  SymEnumSymbolsW
#define SymLoadModuleEx  SymLoadModuleExW
#define SymSetSearchPath  SymSetSearchPathW
#define SymGetSearchPath  SymGetSearchPathW
#define EnumDirTree  EnumDirTreeW
#define SymFromToken  SymFromTokenW
#define SymFromIndex  SymFromIndexW
#define SymGetScope  SymGetScopeW
#define SymNext  SymNextW
#define SymPrev  SymPrevW
#define SymEnumTypes  SymEnumTypesW
#define SymEnumTypesByName  SymEnumTypesByNameW
#define SymRegisterCallback64  SymRegisterCallbackW64
#define SymFindDebugInfoFile  SymFindDebugInfoFileW
#define FindDebugInfoFileEx  FindDebugInfoFileExW
#define SymFindFileInPath  SymFindFileInPathW
#define SymEnumerateModules64  SymEnumerateModulesW64
#define SymSetHomeDirectory  SymSetHomeDirectoryW
#define SymGetHomeDirectory  SymGetHomeDirectoryW
#define SymGetSourceFile  SymGetSourceFileW
#define SymGetSourceFileToken  SymGetSourceFileTokenW
#define SymGetSourceFileFromToken  SymGetSourceFileFromTokenW
#define SymGetSourceVarFromToken  SymGetSourceVarFromTokenW
#define SymGetSourceFileToken  SymGetSourceFileTokenW
#define SymGetFileLineOffsets64  SymGetFileLineOffsetsW64
#define SymFindFileInPath  SymFindFileInPathW
#define SymMatchFileName  SymMatchFileNameW
#define SymGetSourceFileFromToken  SymGetSourceFileFromTokenW
#define SymGetSourceVarFromToken  SymGetSourceVarFromTokenW
#define SymGetModuleInfo64  SymGetModuleInfoW64
#define SymSrvIsStore  SymSrvIsStoreW
#define SymSrvDeltaName  SymSrvDeltaNameW
#define SymSrvGetSupplement  SymSrvGetSupplementW
#define SymSrvStoreSupplement  SymSrvStoreSupplementW
#define SymSrvGetFileIndexes  SymSrvGetFileIndexes
#define SymSrvGetFileIndexString  SymSrvGetFileIndexStringW
#define SymSrvStoreFile  SymSrvStoreFileW
#define SymGetSymbolFile  SymGetSymbolFileW
#define EnumerateLoadedModules64  EnumerateLoadedModulesW64
#define EnumerateLoadedModulesEx  EnumerateLoadedModulesExW
#define SymSrvGetFileIndexInfo  SymSrvGetFileIndexInfoW

#define IMAGEHLP_LINE64  IMAGEHLP_LINEW64
#define PIMAGEHLP_LINE64  PIMAGEHLP_LINEW64
#define SYMBOL_INFO  SYMBOL_INFOW
#define PSYMBOL_INFO  PSYMBOL_INFOW
#define SYMBOL_INFO_PACKAGE  SYMBOL_INFO_PACKAGEW
#define PSYMBOL_INFO_PACKAGE  PSYMBOL_INFO_PACKAGEW
#define FIND_EXE_FILE_CALLBACK  FIND_EXE_FILE_CALLBACKW
#define PFIND_EXE_FILE_CALLBACK  PFIND_EXE_FILE_CALLBACKW
#define SYM_ENUMERATESYMBOLS_CALLBACK  SYM_ENUMERATESYMBOLS_CALLBACKW
#define PSYM_ENUMERATESYMBOLS_CALLBACK  PSYM_ENUMERATESYMBOLS_CALLBACKW
#define SRCCODEINFO  SRCCODEINFOW
#define PSRCCODEINFO  PSRCCODEINFOW
#define SOURCEFILE  SOURCEFILEW
#define PSOURCEFILE  PSOURCEFILEW
#define SYM_ENUMSOURECFILES_CALLBACK  SYM_ENUMSOURCEFILES_CALLBACKW
#define PSYM_ENUMSOURCEFILES_CALLBACK  PSYM_ENUMSOURECFILES_CALLBACKW
#define IMAGEHLP_CBA_EVENT  IMAGEHLP_CBA_EVENTW
#define PIMAGEHLP_CBA_EVENT  PIMAGEHLP_CBA_EVENTW
#define PENUMDIRTREE_CALLBACK  PENUMDIRTREE_CALLBACKW
#define IMAGEHLP_DEFERRED_SYMBOL_LOAD64  IMAGEHLP_DEFERRED_SYMBOL_LOADW64
#define PIMAGEHLP_DEFERRED_SYMBOL_LOAD64  PIMAGEHLP_DEFERRED_SYMBOL_LOADW64
#define PFIND_DEBUG_FILE_CALLBACK  PFIND_DEBUG_FILE_CALLBACKW
#define PFINDFILEINPATHCALLBACK  PFINDFILEINPATHCALLBACKW
#define IMAGEHLP_MODULE64  IMAGEHLP_MODULEW64
#define PIMAGEHLP_MODULE64  PIMAGEHLP_MODULEW64
#define SYMSRV_INDEX_INFO  SYMSRV_INDEX_INFOW
#define PSYMSRV_INDEX_INFO  PSYMSRV_INDEX_INFOW

#define PSYMBOLSERVERPROC  PSYMBOLSERVERPROCW
#define PSYMBOLSERVERPINGPROC  PSYMBOLSERVERPINGPROCW
#endif /* DBGHELP_TRANSLATE_TCHAR */

DBHLP_DEPRECATED BOOL IMAGEAPI FindFileInPath(HANDLE, PCSTR, PCSTR, PVOID, DWORD, DWORD, DWORD, PSTR);
DBHLP_DEPRECATED BOOL IMAGEAPI FindFileInSearchPath(HANDLE, PCSTR, PCSTR, DWORD, DWORD, DWORD, PSTR);
DBHLP_DEPRECATED BOOL IMAGEAPI SymEnumSym(HANDLE, ULONG64, PSYM_ENUMERATESYMBOLS_CALLBACK, PVOID);
DBHLP_DEPRECATED BOOL IMAGEAPI SymEnumerateSymbols64(HANDLE, ULONG64, PSYM_ENUMSYMBOLS_CALLBACK64, PVOID);
DBHLP_DEPRECATED BOOL IMAGEAPI SymEnumerateSymbolsW64(HANDLE, ULONG64, PSYM_ENUMSYMBOLS_CALLBACK64W, PVOID);

#ifdef _IMAGEHLP64
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else /* !_IMAGEHLP64 */
DBHLP_DEPRECATED BOOL IMAGEAPI SymEnumerateSymbols(HANDLE, ULONG, PSYM_ENUMSYMBOLS_CALLBACK, PVOID);
DBHLP_DEPRECATED BOOL IMAGEAPI SymEnumerateSymbolsW(HANDLE, ULONG, PSYM_ENUMSYMBOLS_CALLBACKW, PVOID);
#endif /* !_IMAGEHLP64 */

DWORD64 IMAGEAPI SymLoadModule64(HANDLE, HANDLE, PCSTR, PCSTR, DWORD64, DWORD);

#ifdef _IMAGEHLP64
#define SymLoadModule SymLoadModule64
#else /* !_IMAGEHLP64 */
DWORD IMAGEAPI SymLoadModule(HANDLE, HANDLE, PCSTR, PCSTR, DWORD, DWORD);
#endif /* !_IMAGEHLP64 */

BOOL IMAGEAPI SymGetSymNext64(HANDLE hProcess, PIMAGEHLP_SYMBOL64);
BOOL IMAGEAPI SymGetSymNextW64(HANDLE, PIMAGEHLP_SYMBOLW64);

#ifdef _IMAGEHLP64
#define SymGetSymNext SymGetSymNext64
#define SymGetSymNextW SymGetSymNextW64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymGetSymNext(HANDLE, PIMAGEHLP_SYMBOL);
BOOL IMAGEAPI SymGetSymNextW(HANDLE, PIMAGEHLP_SYMBOLW);
#endif /* !_IMAGEHLP64 */

BOOL IMAGEAPI SymGetSymPrev64(HANDLE, PIMAGEHLP_SYMBOL64);
BOOL IMAGEAPI SymGetSymPrevW64(HANDLE, PIMAGEHLP_SYMBOLW64);

#ifdef _IMAGEHLP64
#define SymGetSymPrev SymGetSymPrev64
#define SymGetSymPrevW SymGetSymPrevW64
#else /* !_IMAGEHLP64 */
BOOL IMAGEAPI SymGetSymPrev(HANDLE, PIMAGEHLP_SYMBOL);
BOOL IMAGEAPI SymGetSymPrevW(HANDLE, PIMAGEHLP_SYMBOLW);
#endif /* !_IMAGEHLP64 */

#define SYMF_OMAP_GENERATED  0x00000001
#define SYMF_OMAP_MODIFIED  0x00000002
#define SYMF_REGISTER  0x00000008
#define SYMF_REGREL  0x00000010
#define SYMF_FRAMEREL  0x00000020
#define SYMF_PARAMETER  0x00000040
#define SYMF_LOCAL  0x00000080
#define SYMF_CONSTANT  0x00000100
#define SYMF_EXPORT  0x00000200
#define SYMF_FORWARDER  0x00000400
#define SYMF_FUNCTION  0x00000800
#define SYMF_VIRTUAL  0x00001000
#define SYMF_THUNK  0x00002000
#define SYMF_TLSREL  0x00004000

#define IMAGEHLP_SYMBOL_INFO_VALUEPRESENT  1
#define IMAGEHLP_SYMBOL_INFO_REGISTER  SYMF_REGISTER
#define IMAGEHLP_SYMBOL_INFO_REGRELATIVE  SYMF_REGREL
#define IMAGEHLP_SYMBOL_INFO_FRAMERELATIVE  SYMF_FRAMEREL
#define IMAGEHLP_SYMBOL_INFO_PARAMETER  SYMF_PARAMETER
#define IMAGEHLP_SYMBOL_INFO_LOCAL  SYMF_LOCAL
#define IMAGEHLP_SYMBOL_INFO_CONSTANT  SYMF_CONSTANT
#define IMAGEHLP_SYMBOL_FUNCTION  SYMF_FUNCTION
#define IMAGEHLP_SYMBOL_VIRTUAL  SYMF_VIRTUAL
#define IMAGEHLP_SYMBOL_THUNK  SYMF_THUNK
#define IMAGEHLP_SYMBOL_INFO_TLSRELATIVE  SYMF_TLSREL

#include <poppack.h>

#include <pshpack4.h>

/* Minidumps (aka Maxidumbs) */

#define MINIDUMP_SIGNATURE  ('PMDM')
#define MINIDUMP_VERSION  (42899)

typedef DWORD RVA;
typedef ULONG64 RVA64;

typedef struct _MINIDUMP_LOCATION_DESCRIPTOR {
    ULONG32 DataSize;
    RVA Rva;
} MINIDUMP_LOCATION_DESCRIPTOR;

typedef struct _MINIDUMP_LOCATION_DESCRIPTOR64 {
    ULONG64 DataSize;
    RVA64 Rva;
} MINIDUMP_LOCATION_DESCRIPTOR64;

typedef struct _MINIDUMP_MEMORY_DESCRIPTOR {
    ULONG64 StartOfMemoryRange;
    MINIDUMP_LOCATION_DESCRIPTOR Memory;
} MINIDUMP_MEMORY_DESCRIPTOR, *PMINIDUMP_MEMORY_DESCRIPTOR;

typedef struct _MINIDUMP_MEMORY_DESCRIPTOR64 {
    ULONG64 StartOfMemoryRange;
    ULONG64 DataSize;
} MINIDUMP_MEMORY_DESCRIPTOR64, *PMINIDUMP_MEMORY_DESCRIPTOR64;

typedef struct _MINIDUMP_HEADER {
    ULONG32 Signature;
    ULONG32 Version;
    ULONG32 NumberOfStreams;
    RVA StreamDirectoryRva;
    ULONG32 CheckSum;
    union {
        ULONG32 Reserved;
        ULONG32 TimeDateStamp;
    };
    ULONG64 Flags;
} MINIDUMP_HEADER, *PMINIDUMP_HEADER;

typedef struct _MINIDUMP_DIRECTORY {
    ULONG32 StreamType;
    MINIDUMP_LOCATION_DESCRIPTOR Location;
} MINIDUMP_DIRECTORY, *PMINIDUMP_DIRECTORY;

typedef struct _MINIDUMP_STRING {
    ULONG32 Length;
    WCHAR Buffer[0];
} MINIDUMP_STRING, *PMINIDUMP_STRING;

typedef enum _MINIDUMP_STREAM_TYPE {
    UnusedStream = 0,
    ReservedStream0 = 1,
    ReservedStream1 = 2,
    ThreadListStream = 3,
    ModuleListStream = 4,
    MemoryListStream = 5,
    ExceptionStream = 6,
    SystemInfoStream = 7,
    ThreadExListStream = 8,
    Memory64ListStream = 9,
    CommentStreamA = 10,
    CommentStreamW = 11,
    HandleDataStream = 12,
    FunctionTableStream = 13,
    UnloadedModuleListStream = 14,
    MiscInfoStream = 15,
    MemoryInfoListStream = 16,
    ThreadInfoListStream = 17,
    HandleOperationListStream = 18,
    TokenStream = 19,
    ceStreamNull = 0x8000,
    ceStreamSystemInfo = 0x8001,
    ceStreamException = 0x8002,
    ceStreamModuleList = 0x8003,
    ceStreamProcessList = 0x8004,
    ceStreamThreadList = 0x8005,
    ceStreamThreadContextList = 0x8006,
    ceStreamThreadCallStackList = 0x8007,
    ceStreamMemoryVirtualList = 0x8008,
    ceStreamMemoryPhysicalList = 0x8009,
    ceStreamBucketParameters = 0x800A,
    ceStreamProcessModuleMap = 0x800B,
    ceStreamDiagnosisList = 0x800C,
    LastReservedStream = 0xffff
} MINIDUMP_STREAM_TYPE;

typedef union _CPU_INFORMATION {
    struct {
        ULONG32 VendorId[3];
        ULONG32 VersionInformation;
        ULONG32 FeatureInformation;
        ULONG32 AMDExtendedCpuFeatures;
    } X86CpuInfo;
    struct {
        ULONG64 ProcessorFeatures[2];
    } OtherCpuInfo;
} CPU_INFORMATION, *PCPU_INFORMATION;

typedef struct _MINIDUMP_SYSTEM_INFO {
    USHORT ProcessorArchitecture;
    USHORT ProcessorLevel;
    USHORT ProcessorRevision;
    union {
        USHORT Reserved0;
        struct {
            UCHAR NumberOfProcessors;
            UCHAR ProductType;
        };
    };
    ULONG32 MajorVersion;
    ULONG32 MinorVersion;
    ULONG32 BuildNumber;
    ULONG32 PlatformId;
    RVA CSDVersionRva;
    union {
        ULONG32 Reserved1;
        struct {
            USHORT SuiteMask;
            USHORT Reserved2;
        };
    };
    CPU_INFORMATION Cpu;
} MINIDUMP_SYSTEM_INFO, *PMINIDUMP_SYSTEM_INFO;

C_ASSERT(sizeof(((PPROCESS_INFORMATION)0)->dwThreadId) == 4);

typedef struct _MINIDUMP_THREAD {
    ULONG32 ThreadId;
    ULONG32 SuspendCount;
    ULONG32 PriorityClass;
    ULONG32 Priority;
    ULONG64 Teb;
    MINIDUMP_MEMORY_DESCRIPTOR Stack;
    MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
} MINIDUMP_THREAD, *PMINIDUMP_THREAD;

typedef struct _MINIDUMP_THREAD_LIST {
    ULONG32 NumberOfThreads;
    MINIDUMP_THREAD Threads[0];
} MINIDUMP_THREAD_LIST, *PMINIDUMP_THREAD_LIST;

typedef struct _MINIDUMP_THREAD_EX {
    ULONG32 ThreadId;
    ULONG32 SuspendCount;
    ULONG32 PriorityClass;
    ULONG32 Priority;
    ULONG64 Teb;
    MINIDUMP_MEMORY_DESCRIPTOR Stack;
    MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
    MINIDUMP_MEMORY_DESCRIPTOR BackingStore;
} MINIDUMP_THREAD_EX, *PMINIDUMP_THREAD_EX;

typedef struct _MINIDUMP_THREAD_EX_LIST {
    ULONG32 NumberOfThreads;
    MINIDUMP_THREAD_EX Threads[0];
} MINIDUMP_THREAD_EX_LIST, *PMINIDUMP_THREAD_EX_LIST;

typedef struct _MINIDUMP_EXCEPTION {
    ULONG32 ExceptionCode;
    ULONG32 ExceptionFlags;
    ULONG64 ExceptionRecord;
    ULONG64 ExceptionAddress;
    ULONG32 NumberParameters;
    ULONG32 __unusedAlignment;
    ULONG64 ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];
} MINIDUMP_EXCEPTION, *PMINIDUMP_EXCEPTION;

typedef struct MINIDUMP_EXCEPTION_STREAM {
    ULONG32 ThreadId;
    ULONG32 __alignment;
    MINIDUMP_EXCEPTION ExceptionRecord;
    MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
} MINIDUMP_EXCEPTION_STREAM, *PMINIDUMP_EXCEPTION_STREAM;

typedef struct _MINIDUMP_MODULE {
    ULONG64 BaseOfImage;
    ULONG32 SizeOfImage;
    ULONG32 CheckSum;
    ULONG32 TimeDateStamp;
    RVA ModuleNameRva;
    VS_FIXEDFILEINFO VersionInfo;
    MINIDUMP_LOCATION_DESCRIPTOR CvRecord;
    MINIDUMP_LOCATION_DESCRIPTOR MiscRecord;
    ULONG64 Reserved0;
    ULONG64 Reserved1;
} MINIDUMP_MODULE, *PMINIDUMP_MODULE;

typedef struct _MINIDUMP_MODULE_LIST {
    ULONG32 NumberOfModules;
    MINIDUMP_MODULE Modules[0];
} MINIDUMP_MODULE_LIST, *PMINIDUMP_MODULE_LIST;

typedef struct _MINIDUMP_MEMORY_LIST {
    ULONG32 NumberOfMemoryRanges;
    MINIDUMP_MEMORY_DESCRIPTOR MemoryRanges[0];
} MINIDUMP_MEMORY_LIST, *PMINIDUMP_MEMORY_LIST;

typedef struct _MINIDUMP_MEMORY64_LIST {
    ULONG64 NumberOfMemoryRanges;
    RVA64 BaseRva;
    MINIDUMP_MEMORY_DESCRIPTOR64 MemoryRanges[0];
} MINIDUMP_MEMORY64_LIST, *PMINIDUMP_MEMORY64_LIST;

typedef struct _MINIDUMP_EXCEPTION_INFORMATION {
    DWORD ThreadId;
    PEXCEPTION_POINTERS ExceptionPointers;
    BOOL ClientPointers;
} MINIDUMP_EXCEPTION_INFORMATION, *PMINIDUMP_EXCEPTION_INFORMATION;

typedef struct _MINIDUMP_EXCEPTION_INFORMATION64 {
    DWORD ThreadId;
    ULONG64 ExceptionRecord;
    ULONG64 ContextRecord;
    BOOL ClientPointers;
} MINIDUMP_EXCEPTION_INFORMATION64, *PMINIDUMP_EXCEPTION_INFORMATION64;

typedef enum _MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE {
    MiniHandleObjectInformationNone,
    MiniThreadInformation1,
    MiniMutantInformation1,
    MiniMutantInformation2,
    MiniProcessInformation1,
    MiniProcessInformation2,
    MiniHandleObjectInformationTypeMax
} MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE;

typedef struct _MINIDUMP_HANDLE_OBJECT_INFORMATION {
    RVA NextInfoRva;
    ULONG32 InfoType;
    ULONG32 SizeOfInfo;
} MINIDUMP_HANDLE_OBJECT_INFORMATION;

typedef struct _MINIDUMP_HANDLE_DESCRIPTOR {
    ULONG64 Handle;
    RVA TypeNameRva;
    RVA ObjectNameRva;
    ULONG32 Attributes;
    ULONG32 GrantedAccess;
    ULONG32 HandleCount;
    ULONG32 PointerCount;
} MINIDUMP_HANDLE_DESCRIPTOR, *PMINIDUMP_HANDLE_DESCRIPTOR;

typedef struct _MINIDUMP_HANDLE_DESCRIPTOR_2 {
    ULONG64 Handle;
    RVA TypeNameRva;
    RVA ObjectNameRva;
    ULONG32 Attributes;
    ULONG32 GrantedAccess;
    ULONG32 HandleCount;
    ULONG32 PointerCount;
    RVA ObjectInfoRva;
    ULONG32 Reserved0;
} MINIDUMP_HANDLE_DESCRIPTOR_2, *PMINIDUMP_HANDLE_DESCRIPTOR_2;

typedef MINIDUMP_HANDLE_DESCRIPTOR_2 MINIDUMP_HANDLE_DESCRIPTOR_N;
typedef MINIDUMP_HANDLE_DESCRIPTOR_N *PMINIDUMP_HANDLE_DESCRIPTOR_N;

typedef struct _MINIDUMP_HANDLE_DATA_STREAM {
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfDescriptor;
    ULONG32 NumberOfDescriptors;
    ULONG32 Reserved;
} MINIDUMP_HANDLE_DATA_STREAM, *PMINIDUMP_HANDLE_DATA_STREAM;

typedef struct _MINIDUMP_HANDLE_OPERATION_LIST {
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfEntry;
    ULONG32 NumberOfEntries;
    ULONG32 Reserved;
} MINIDUMP_HANDLE_OPERATION_LIST, *PMINIDUMP_HANDLE_OPERATION_LIST;

typedef struct _MINIDUMP_FUNCTION_TABLE_DESCRIPTOR {
    ULONG64 MinimumAddress;
    ULONG64 MaximumAddress;
    ULONG64 BaseAddress;
    ULONG32 EntryCount;
    ULONG32 SizeOfAlignPad;
} MINIDUMP_FUNCTION_TABLE_DESCRIPTOR, *PMINIDUMP_FUNCTION_TABLE_DESCRIPTOR;

typedef struct _MINIDUMP_FUNCTION_TABLE_STREAM {
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfDescriptor;
    ULONG32 SizeOfNativeDescriptor;
    ULONG32 SizeOfFunctionEntry;
    ULONG32 NumberOfDescriptors;
    ULONG32 SizeOfAlignPad;
} MINIDUMP_FUNCTION_TABLE_STREAM, *PMINIDUMP_FUNCTION_TABLE_STREAM;

typedef struct _MINIDUMP_UNLOADED_MODULE {
    ULONG64 BaseOfImage;
    ULONG32 SizeOfImage;
    ULONG32 CheckSum;
    ULONG32 TimeDateStamp;
    RVA ModuleNameRva;
} MINIDUMP_UNLOADED_MODULE, *PMINIDUMP_UNLOADED_MODULE;

typedef struct _MINIDUMP_UNLOADED_MODULE_LIST {
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfEntry;
    ULONG32 NumberOfEntries;
} MINIDUMP_UNLOADED_MODULE_LIST, *PMINIDUMP_UNLOADED_MODULE_LIST;

#define MINIDUMP_MISC1_PROCESS_ID            0x00000001
#define MINIDUMP_MISC1_PROCESS_TIMES         0x00000002
#define MINIDUMP_MISC1_PROCESSOR_POWER_INFO  0x00000004
#define MINIDUMP_MISC3_PROCESS_INTEGRITY     0x00000010
#define MINIDUMP_MISC3_PROCESS_EXECUTE_FLAGS 0x00000020
#define MINIDUMP_MISC3_TIMEZONE              0x00000040
#define MINIDUMP_MISC3_PROTECTED_PROCESS     0x00000080

typedef struct _MINIDUMP_MISC_INFO {
    ULONG32 SizeOfInfo;
    ULONG32 Flags1;
    ULONG32 ProcessId;
    ULONG32 ProcessCreateTime;
    ULONG32 ProcessUserTime;
    ULONG32 ProcessKernelTime;
} MINIDUMP_MISC_INFO, *PMINIDUMP_MISC_INFO;

typedef struct _MINIDUMP_MISC_INFO_2 {
    ULONG32 SizeOfInfo;
    ULONG32 Flags1;
    ULONG32 ProcessId;
    ULONG32 ProcessCreateTime;
    ULONG32 ProcessUserTime;
    ULONG32 ProcessKernelTime;
    ULONG32 ProcessorMaxMhz;
    ULONG32 ProcessorCurrentMhz;
    ULONG32 ProcessorMhzLimit;
    ULONG32 ProcessorMaxIdleState;
    ULONG32 ProcessorCurrentIdleState;
} MINIDUMP_MISC_INFO_2, *PMINIDUMP_MISC_INFO_2;

typedef struct _MINIDUMP_MISC_INFO_3 {
    ULONG32 SizeOfInfo;
    ULONG32 Flags1;
    ULONG32 ProcessId;
    ULONG32 ProcessCreateTime;
    ULONG32 ProcessUserTime;
    ULONG32 ProcessKernelTime;
    ULONG32 ProcessorMaxMhz;
    ULONG32 ProcessorCurrentMhz;
    ULONG32 ProcessorMhzLimit;
    ULONG32 ProcessorMaxIdleState;
    ULONG32 ProcessorCurrentIdleState;
    ULONG32 ProcessIntegrityLevel;
    ULONG32 ProcessExecuteFlags;
    ULONG32 ProtectedProcess;
    ULONG32 TimeZoneId;
    TIME_ZONE_INFORMATION TimeZone;
} MINIDUMP_MISC_INFO_3, *PMINIDUMP_MISC_INFO_3;

typedef MINIDUMP_MISC_INFO_3 MINIDUMP_MISC_INFO_N;
typedef MINIDUMP_MISC_INFO_N *PMINIDUMP_MISC_INFO_N;

typedef struct _MINIDUMP_MEMORY_INFO {
    ULONG64 BaseAddress;
    ULONG64 AllocationBase;
    ULONG32 AllocationProtect;
    ULONG32 __alignment1;
    ULONG64 RegionSize;
    ULONG32 State;
    ULONG32 Protect;
    ULONG32 Type;
    ULONG32 __alignment2;
} MINIDUMP_MEMORY_INFO, *PMINIDUMP_MEMORY_INFO;

typedef struct _MINIDUMP_MEMORY_INFO_LIST {
    ULONG SizeOfHeader;
    ULONG SizeOfEntry;
    ULONG64 NumberOfEntries;
} MINIDUMP_MEMORY_INFO_LIST, *PMINIDUMP_MEMORY_INFO_LIST;

#define MINIDUMP_THREAD_INFO_ERROR_THREAD    0x00000001
#define MINIDUMP_THREAD_INFO_WRITING_THREAD  0x00000002
#define MINIDUMP_THREAD_INFO_EXITED_THREAD   0x00000004
#define MINIDUMP_THREAD_INFO_INVALID_INFO    0x00000008
#define MINIDUMP_THREAD_INFO_INVALID_CONTEXT 0x00000010
#define MINIDUMP_THREAD_INFO_INVALID_TEB     0x00000020

typedef struct _MINIDUMP_THREAD_INFO {
    ULONG32 ThreadId;
    ULONG32 DumpFlags;
    ULONG32 DumpError;
    ULONG32 ExitStatus;
    ULONG64 CreateTime;
    ULONG64 ExitTime;
    ULONG64 KernelTime;
    ULONG64 UserTime;
    ULONG64 StartAddress;
    ULONG64 Affinity;
} MINIDUMP_THREAD_INFO, *PMINIDUMP_THREAD_INFO;

typedef struct _MINIDUMP_THREAD_INFO_LIST {
    ULONG SizeOfHeader;
    ULONG SizeOfEntry;
    ULONG NumberOfEntries;
} MINIDUMP_THREAD_INFO_LIST, *PMINIDUMP_THREAD_INFO_LIST;

typedef struct _MINIDUMP_TOKEN_INFO_HEADER {
    ULONG TokenSize;
    ULONG TokenId;
    ULONG64 TokenHandle;
} MINIDUMP_TOKEN_INFO_HEADER, *PMINIDUMP_TOKEN_INFO_HEADER;

typedef struct _MINIDUMP_TOKEN_INFO_LIST {
    ULONG TokenListSize;
    ULONG TokenListEntries;
    ULONG ListHeaderSize;
    ULONG ElementHeaderSize;
} MINIDUMP_TOKEN_INFO_LIST, *PMINIDUMP_TOKEN_INFO_LIST;

typedef struct _MINIDUMP_USER_RECORD {
    ULONG32 Type;
    MINIDUMP_LOCATION_DESCRIPTOR Memory;
} MINIDUMP_USER_RECORD, *PMINIDUMP_USER_RECORD;

typedef struct _MINIDUMP_USER_STREAM {
    ULONG32 Type;
    ULONG BufferSize;
    PVOID Buffer;
} MINIDUMP_USER_STREAM, *PMINIDUMP_USER_STREAM;

typedef struct _MINIDUMP_USER_STREAM_INFORMATION {
    ULONG UserStreamCount;
    PMINIDUMP_USER_STREAM UserStreamArray;
} MINIDUMP_USER_STREAM_INFORMATION, *PMINIDUMP_USER_STREAM_INFORMATION;

typedef enum _MINIDUMP_CALLBACK_TYPE {
    ModuleCallback,
    ThreadCallback,
    ThreadExCallback,
    IncludeThreadCallback,
    IncludeModuleCallback,
    MemoryCallback,
    CancelCallback,
    WriteKernelMinidumpCallback,
    KernelMinidumpStatusCallback,
    RemoveMemoryCallback,
    IncludeVmRegionCallback,
    IoStartCallback,
    IoWriteAllCallback,
    IoFinishCallback,
    ReadMemoryFailureCallback,
    SecondaryFlagsCallback,
} MINIDUMP_CALLBACK_TYPE;

typedef struct _MINIDUMP_THREAD_CALLBACK {
    ULONG ThreadId;
    HANDLE ThreadHandle;
    CONTEXT Context;
    ULONG SizeOfContext;
    ULONG64 StackBase;
    ULONG64 StackEnd;
} MINIDUMP_THREAD_CALLBACK, *PMINIDUMP_THREAD_CALLBACK;

typedef struct _MINIDUMP_THREAD_EX_CALLBACK {
    ULONG ThreadId;
    HANDLE ThreadHandle;
    CONTEXT Context;
    ULONG SizeOfContext;
    ULONG64 StackBase;
    ULONG64 StackEnd;
    ULONG64 BackingStoreBase;
    ULONG64 BackingStoreEnd;
} MINIDUMP_THREAD_EX_CALLBACK, *PMINIDUMP_THREAD_EX_CALLBACK;

typedef struct _MINIDUMP_INCLUDE_THREAD_CALLBACK {
    ULONG ThreadId;
} MINIDUMP_INCLUDE_THREAD_CALLBACK, *PMINIDUMP_INCLUDE_THREAD_CALLBACK;

typedef enum _THREAD_WRITE_FLAGS {
    ThreadWriteThread = 0x0001,
    ThreadWriteStack = 0x0002,
    ThreadWriteContext = 0x0004,
    ThreadWriteBackingStore = 0x0008,
    ThreadWriteInstructionWindow = 0x0010,
    ThreadWriteThreadData = 0x0020,
    ThreadWriteThreadInfo = 0x0040,
} THREAD_WRITE_FLAGS;

typedef struct _MINIDUMP_MODULE_CALLBACK {
    PWCHAR FullPath;
    ULONG64 BaseOfImage;
    ULONG SizeOfImage;
    ULONG CheckSum;
    ULONG TimeDateStamp;
    VS_FIXEDFILEINFO VersionInfo;
    PVOID CvRecord;
    ULONG SizeOfCvRecord;
    PVOID MiscRecord;
    ULONG SizeOfMiscRecord;
} MINIDUMP_MODULE_CALLBACK, *PMINIDUMP_MODULE_CALLBACK;

typedef struct _MINIDUMP_INCLUDE_MODULE_CALLBACK {
    ULONG64 BaseOfImage;
} MINIDUMP_INCLUDE_MODULE_CALLBACK, *PMINIDUMP_INCLUDE_MODULE_CALLBACK;

typedef enum _MODULE_WRITE_FLAGS {
    ModuleWriteModule = 0x0001,
    ModuleWriteDataSeg = 0x0002,
    ModuleWriteMiscRecord = 0x0004,
    ModuleWriteCvRecord = 0x0008,
    ModuleReferencedByMemory = 0x0010,
    ModuleWriteTlsData = 0x0020,
    ModuleWriteCodeSegs = 0x0040,
} MODULE_WRITE_FLAGS;

typedef struct _MINIDUMP_IO_CALLBACK {
    HANDLE Handle;
    ULONG64 Offset;
    PVOID Buffer;
    ULONG BufferBytes;
} MINIDUMP_IO_CALLBACK, *PMINIDUMP_IO_CALLBACK;

typedef struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK {
    ULONG64 Offset;
    ULONG Bytes;
    HRESULT FailureStatus;
} MINIDUMP_READ_MEMORY_FAILURE_CALLBACK, *PMINIDUMP_READ_MEMORY_FAILURE_CALLBACK;

typedef struct _MINIDUMP_CALLBACK_INPUT {
    ULONG ProcessId;
    HANDLE ProcessHandle;
    ULONG CallbackType;
    union {
        HRESULT Status;
        MINIDUMP_THREAD_CALLBACK Thread;
        MINIDUMP_THREAD_EX_CALLBACK ThreadEx;
        MINIDUMP_MODULE_CALLBACK Module;
        MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
        MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
        MINIDUMP_IO_CALLBACK Io;
        MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure;
        ULONG SecondaryFlags;
    };
} MINIDUMP_CALLBACK_INPUT, *PMINIDUMP_CALLBACK_INPUT;

typedef struct _MINIDUMP_CALLBACK_OUTPUT {
    union {
        ULONG ModuleWriteFlags;
        ULONG ThreadWriteFlags;
        ULONG SecondaryFlags;
        struct {
            ULONG64 MemoryBase;
            ULONG MemorySize;
        };
        struct {
            BOOL CheckCancel;
            BOOL Cancel;
        };
        HANDLE Handle;
        struct {
            MINIDUMP_MEMORY_INFO VmRegion;
            BOOL Continue;
        };
        HRESULT Status;
    };
} MINIDUMP_CALLBACK_OUTPUT, *PMINIDUMP_CALLBACK_OUTPUT;

typedef enum _MINIDUMP_TYPE {
    MiniDumpNormal = 0x00000000,
    MiniDumpWithDataSegs = 0x00000001,
    MiniDumpWithFullMemory = 0x00000002,
    MiniDumpWithHandleData = 0x00000004,
    MiniDumpFilterMemory = 0x00000008,
    MiniDumpScanMemory = 0x00000010,
    MiniDumpWithUnloadedModules = 0x00000020,
    MiniDumpWithIndirectlyReferencedMemory = 0x00000040,
    MiniDumpFilterModulePaths = 0x00000080,
    MiniDumpWithProcessThreadData = 0x00000100,
    MiniDumpWithPrivateReadWriteMemory = 0x00000200,
    MiniDumpWithoutOptionalData = 0x00000400,
    MiniDumpWithFullMemoryInfo = 0x00000800,
    MiniDumpWithThreadInfo = 0x00001000,
    MiniDumpWithCodeSegs = 0x00002000,
    MiniDumpWithoutAuxiliaryState = 0x00004000,
    MiniDumpWithFullAuxiliaryState = 0x00008000,
    MiniDumpWithPrivateWriteCopyMemory = 0x00010000,
    MiniDumpIgnoreInaccessibleMemory = 0x00020000,
    MiniDumpWithTokenInformation = 0x00040000,
    MiniDumpValidTypeFlags = 0x0007ffff,
} MINIDUMP_TYPE;

typedef enum _MINIDUMP_SECONDARY_FLAGS {
    MiniSecondaryWithoutPowerInfo = 0x00000001,
    MiniSecondaryValidFlags = 0x00000001,
} MINIDUMP_SECONDARY_FLAGS;

typedef BOOL (WINAPI *MINIDUMP_CALLBACK_ROUTINE)(PVOID, PMINIDUMP_CALLBACK_INPUT, PMINIDUMP_CALLBACK_OUTPUT);

typedef struct _MINIDUMP_CALLBACK_INFORMATION {
    MINIDUMP_CALLBACK_ROUTINE CallbackRoutine;
    PVOID CallbackParam;
} MINIDUMP_CALLBACK_INFORMATION, *PMINIDUMP_CALLBACK_INFORMATION;

#define RVA_TO_ADDR(Mapping,Rva)  ((PVOID)(((ULONG_PTR) (Mapping)) + (Rva)))

BOOL WINAPI MiniDumpWriteDump(HANDLE, DWORD, HANDLE, MINIDUMP_TYPE, PMINIDUMP_EXCEPTION_INFORMATION, PMINIDUMP_USER_STREAM_INFORMATION, PMINIDUMP_CALLBACK_INFORMATION);
BOOL WINAPI MiniDumpReadDumpStream(PVOID, ULONG, PMINIDUMP_DIRECTORY *, PVOID *, ULONG *);

#include <poppack.h>

#if __POCC__ >= 290
#pragma warn(pop)
#endif

#ifdef __cplusplus
}
#endif

#endif /* _IMAGEHLP_H */

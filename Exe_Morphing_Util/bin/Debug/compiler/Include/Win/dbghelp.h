#ifndef _DBGHELP_H
#define _DBGHELP_H

#if __POCC__ >= 500
#pragma once
#endif

/* Windows Debug Help library definitions */

#ifdef _WIN64
#ifndef _IMAGEHLP64
#define _IMAGEHLP64
#endif
#endif /* _WIN64 */

#ifdef __cplusplus
extern "C" {
#endif

#if __POCC__ >= 290
#pragma warn(push)
#pragma warn(disable:2185)  /* Alignment of field 'x' can be less than the natural alignment */
#pragma warn(disable:2198)  /* Nameless field is not standard */
#endif

#define IMAGEAPI DECLSPEC_IMPORT  __stdcall
#define DBHLP_DEPRECIATED
#define DBHLPAPI IMAGEAPI

#define IMAGE_SEPARATION  (64*1024)

#define SSRVOPT_CALLBACK  0x0001
#define SSRVOPT_DWORD  0x0002
#define SSRVOPT_DWORDPTR  0x0004
#define SSRVOPT_GUIDPTR  0x0008
#define SSRVOPT_OLDGUIDPTR  0x0010
#define SSRVOPT_UNATTENDED  0x0020
#define SSRVOPT_NOCOPY  0x0040
#define SSRVOPT_PARENTWIN  0x0080
#define SSRVOPT_PARAMTYPE  0x0100
#define SSRVOPT_SECURE  0x0200
#define SSRVOPT_TRACE  0x0400
#define SSRVOPT_SETCONTEXT  0x0800
#define SSRVOPT_PROXY  0x1000
#define SSRVOPT_DOWNSTREAM_STORE  0x2000
#define SSRVOPT_RESET  ((ULONG_PTR)-1)

#define SSRVACTION_TRACE  1
#define SSRVACTION_QUERYCANCEL  2
#define SSRVACTION_EVENT  3

#define MAX_SYM_NAME  2000

#define UNDNAME_COMPLETE  0x0000
#define UNDNAME_NO_LEADING_UNDERSCORES  0x0001
#define UNDNAME_NO_MS_KEYWORDS  0x0002
#define UNDNAME_NO_FUNCTION_RETURNS  0x0004
#define UNDNAME_NO_ALLOCATION_MODEL  0x0008
#define UNDNAME_NO_ALLOCATION_LANGUAGE  0x0010
#define UNDNAME_NO_MS_THISTYPE  0x0020
#define UNDNAME_NO_CV_THISTYPE  0x0040
#define UNDNAME_NO_THISTYPE  0x0060
#define UNDNAME_NO_ACCESS_SPECIFIERS  0x0080
#define UNDNAME_NO_THROW_SIGNATURES  0x0100
#define UNDNAME_NO_MEMBER_TYPE  0x0200
#define UNDNAME_NO_RETURN_UDT_MODEL  0x0400
#define UNDNAME_32_BIT_DECODE  0x0800
#define UNDNAME_NAME_ONLY  0x1000
#define UNDNAME_NO_ARGUMENTS  0x2000
#define UNDNAME_NO_SPECIAL_SYMS  0x4000

#define DBHHEADER_DEBUGDIRS  0x1

#define API_VERSION_NUMBER  9

#define SYMFLAG_VALUEPRESENT  0x00000001
#define SYMFLAG_REGISTER  0x00000008
#define SYMFLAG_REGREL  0x00000010
#define SYMFLAG_FRAMEREL  0x00000020
#define SYMFLAG_PARAMETER  0x00000040
#define SYMFLAG_LOCAL  0x00000080
#define SYMFLAG_CONSTANT  0x00000100
#define SYMFLAG_EXPORT  0x00000200
#define SYMFLAG_FORWARDER  0x00000400
#define SYMFLAG_FUNCTION  0x00000800
#define SYMFLAG_VIRTUAL  0x00001000
#define SYMFLAG_THUNK  0x00002000
#define SYMFLAG_TLSREL  0x00004000

#define CBA_DEFERRED_SYMBOL_LOAD_START  0x00000001
#define CBA_DEFERRED_SYMBOL_LOAD_COMPLETE  0x00000002
#define CBA_DEFERRED_SYMBOL_LOAD_FAILURE  0x00000003
#define CBA_SYMBOLS_UNLOADED  0x00000004
#define CBA_DUPLICATE_SYMBOL  0x00000005
#define CBA_READ_MEMORY  0x00000006
#define CBA_DEFERRED_SYMBOL_LOAD_CANCEL  0x00000007
#define CBA_SET_OPTIONS  0x00000008
#define CBA_EVENT  0x00000010
#define CBA_DEFERRED_SYMBOL_LOAD_PARTIAL  0x00000020
#define CBA_DEBUG_INFO  0x10000000

#define DSLFLAG_MISMATCHED_PDB  0x1
#define DSLFLAG_MISMATCHED_DBG  0x2

#define SYMOPT_CASE_INSENSITIVE  0x00000001
#define SYMOPT_UNDNAME  0x00000002
#define SYMOPT_DEFERRED_LOADS  0x00000004
#define SYMOPT_NO_CPP  0x00000008
#define SYMOPT_LOAD_LINES  0x00000010
#define SYMOPT_OMAP_FIND_NEAREST  0x00000020
#define SYMOPT_LOAD_ANYTHING  0x00000040
#define SYMOPT_IGNORE_CVREC  0x00000080
#define SYMOPT_NO_UNQUALIFIED_LOADS  0x00000100
#define SYMOPT_FAIL_CRITICAL_ERRORS  0x00000200
#define SYMOPT_EXACT_SYMBOLS  0x00000400
#define SYMOPT_ALLOW_ABSOLUTE_SYMBOLS  0x00000800
#define SYMOPT_IGNORE_NT_SYMPATH  0x00001000
#define SYMOPT_INCLUDE_32BIT_MODULES  0x00002000
#define SYMOPT_PUBLICS_ONLY  0x00004000
#define SYMOPT_NO_PUBLICS  0x00008000
#define SYMOPT_AUTO_PUBLICS  0x00010000
#define SYMOPT_NO_IMAGE_SEARCH  0x00020000
#define SYMOPT_SECURE  0x00040000
#define SYMOPT_NO_PROMPTS  0x00080000
#define SYMOPT_DEBUG  0x80000000

#define SLMFLAG_VIRTUAL  0x1

#define SYMENUMFLAG_FULLSRCH  1
#define SYMENUMFLAG_SPEEDSRCH  2

#define SYMF_OMAP_GENERATED  0x00000001
#define SYMF_OMAP_MODIFIED  0x00000002
#define SYMF_REGISTER  0x00000008
#define SYMF_REGREL  0x00000010
#define SYMF_FRAMEREL  0x00000020
#define SYMF_PARAMETER  0x00000040
#define SYMF_LOCAL  0x00000080
#define SYMF_CONSTANT  0x00000100
#define SYMF_EXPORT  0x00000200
#define SYMF_FORWARDER  0x00000400
#define SYMF_FUNCTION  0x00000800
#define SYMF_VIRTUAL  0x00001000
#define SYMF_THUNK  0x00002000
#define SYMF_TLSREL  0x00004000

#define IMAGEHLP_SYMBOL_INFO_VALUEPRESENT  1
#define IMAGEHLP_SYMBOL_INFO_REGISTER  SYMF_REGISTER
#define IMAGEHLP_SYMBOL_INFO_REGRELATIVE  SYMF_REGREL
#define IMAGEHLP_SYMBOL_INFO_FRAMERELATIVE  SYMF_FRAMEREL
#define IMAGEHLP_SYMBOL_INFO_PARAMETER  SYMF_PARAMETER
#define IMAGEHLP_SYMBOL_INFO_LOCAL  SYMF_LOCAL
#define IMAGEHLP_SYMBOL_INFO_CONSTANT  SYMF_CONSTANT
#define IMAGEHLP_SYMBOL_FUNCTION  SYMF_FUNCTION
#define IMAGEHLP_SYMBOL_VIRTUAL  SYMF_VIRTUAL
#define IMAGEHLP_SYMBOL_THUNK  SYMF_THUNK
#define IMAGEHLP_SYMBOL_INFO_TLSRELATIVE  SYMF_TLSREL

#define MINIDUMP_MISC1_PROCESS_ID    0x00000001
#define MINIDUMP_MISC1_PROCESS_TIMES 0x00000002

#define RVA_TO_ADDR(Mapping,Rva)  ((PVOID)(((ULONG_PTR) (Mapping)) + (Rva)))

typedef struct _LOADED_IMAGE {
    PSTR ModuleName;
    HANDLE hFile;
    PUCHAR MappedAddress;
#ifdef _IMAGEHLP64
    PIMAGE_NT_HEADERS64 FileHeader;
#else
    PIMAGE_NT_HEADERS32 FileHeader;
#endif
    PIMAGE_SECTION_HEADER LastRvaSection;
    ULONG NumberOfSections;
    PIMAGE_SECTION_HEADER Sections;
    ULONG Characteristics;
    BOOLEAN fSystemImage;
    BOOLEAN fDOSImage;
    LIST_ENTRY Links;
    ULONG SizeOfImage;
} LOADED_IMAGE, *PLOADED_IMAGE;


typedef BOOL (CALLBACK *PFIND_DEBUG_FILE_CALLBACK)(HANDLE,PSTR,PVOID);
typedef BOOL (CALLBACK *PFINDFILEINPATHCALLBACK)(PSTR,PVOID);
typedef BOOL (CALLBACK *PFIND_EXE_FILE_CALLBACK)(HANDLE,PSTR,PVOID);

typedef BOOL (WINAPI *PSYMBOLSERVERPROC)(LPCSTR,LPCSTR,PVOID,DWORD,DWORD,LPSTR);
typedef BOOL (WINAPI *PSYMBOLSERVEROPENPROC)(VOID);
typedef BOOL (WINAPI *PSYMBOLSERVERCLOSEPROC)(VOID);
typedef BOOL (WINAPI *PSYMBOLSERVERSETOPTIONSPROC)(UINT_PTR,ULONG64);
typedef BOOL (CALLBACK WINAPI *PSYMBOLSERVERCALLBACKPROC)(UINT_PTR,ULONG64,ULONG64);
typedef UINT_PTR (WINAPI *PSYMBOLSERVERGETOPTIONSPROC)(void);
typedef BOOL (WINAPI *PSYMBOLSERVERPINGPROC)(LPCSTR);

HANDLE IMAGEAPI FindDebugInfoFile(PSTR,PSTR,PSTR);
HANDLE IMAGEAPI FindDebugInfoFileEx(PSTR,PSTR,PSTR,PFIND_DEBUG_FILE_CALLBACK,PVOID);
BOOL IMAGEAPI SymFindFileInPath(HANDLE,LPSTR,LPSTR,PVOID,DWORD,DWORD,DWORD,LPSTR,PFINDFILEINPATHCALLBACK,PVOID);
HANDLE IMAGEAPI FindExecutableImage(PSTR,PSTR,PSTR);
HANDLE IMAGEAPI FindExecutableImageEx(PSTR,PSTR,PSTR,PFIND_EXE_FILE_CALLBACK,PVOID);

PIMAGE_NT_HEADERS IMAGEAPI ImageNtHeader(PVOID);
PVOID IMAGEAPI ImageDirectoryEntryToDataEx(PVOID,BOOLEAN,USHORT,PULONG,PIMAGE_SECTION_HEADER*);
PVOID IMAGEAPI ImageDirectoryEntryToData(PVOID,BOOLEAN,USHORT,PULONG);
PIMAGE_SECTION_HEADER IMAGEAPI ImageRvaToSection(PIMAGE_NT_HEADERS,PVOID,ULONG);
PVOID IMAGEAPI ImageRvaToVa(PIMAGE_NT_HEADERS,PVOID,ULONG,PIMAGE_SECTION_HEADER*);

#ifndef _WIN64
typedef struct _IMAGE_DEBUG_INFORMATION {
    LIST_ENTRY List;
    DWORD ReservedSize;
    PVOID ReservedMappedBase;
    USHORT ReservedMachine;
    USHORT ReservedCharacteristics;
    DWORD ReservedCheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD ReservedNumberOfSections;
    PIMAGE_SECTION_HEADER ReservedSections;
    DWORD ReservedExportedNamesSize;
    PSTR ReservedExportedNames;
    DWORD ReservedNumberOfFunctionTableEntries;
    PIMAGE_FUNCTION_ENTRY ReservedFunctionTableEntries;
    DWORD ReservedLowestFunctionStartingAddress;
    DWORD ReservedHighestFunctionEndingAddress;
    DWORD ReservedNumberOfFpoTableEntries;
    PFPO_DATA ReservedFpoTableEntries;
    DWORD SizeOfCoffSymbols;
    PIMAGE_COFF_SYMBOLS_HEADER CoffSymbols;
    DWORD ReservedSizeOfCodeViewSymbols;
    PVOID ReservedCodeViewSymbols;
    PSTR ImageFilePath;
    PSTR ImageFileName;
    PSTR ReservedDebugFilePath;
    DWORD ReservedTimeDateStamp;
    BOOL ReservedRomImage;
    PIMAGE_DEBUG_DIRECTORY ReservedDebugDirectory;
    DWORD ReservedNumberOfDebugDirectories;
    DWORD ReservedOriginalFunctionTableBaseAddress;
    DWORD Reserved[2];
} IMAGE_DEBUG_INFORMATION, *PIMAGE_DEBUG_INFORMATION;

PIMAGE_DEBUG_INFORMATION IMAGEAPI MapDebugInformation(HANDLE,PSTR,PSTR,DWORD);
BOOL IMAGEAPI UnmapDebugInformation(PIMAGE_DEBUG_INFORMATION);
#endif /* _WIN64 */

typedef BOOL (CALLBACK *PENUMDIRTREE_CALLBACK)(LPCSTR,PVOID);

BOOL IMAGEAPI SearchTreeForFile(PSTR, PSTR,PSTR);
BOOL IMAGEAPI EnumDirTree(HANDLE,PSTR,PSTR,PSTR,PENUMDIRTREE_CALLBACK,PVOID);
BOOL IMAGEAPI MakeSureDirectoryPathExists(PCSTR);
DWORD IMAGEAPI WINAPI UnDecorateSymbolName(PCSTR,PSTR,DWORD,DWORD);

typedef struct _MODLOAD_DATA {
    DWORD ssize;
    DWORD ssig;
    PVOID data;
    DWORD size;
    DWORD flags;
} MODLOAD_DATA, *PMODLOAD_DATA;

typedef enum {
    AddrMode1616,
    AddrMode1632,
    AddrModeReal,
    AddrModeFlat
} ADDRESS_MODE;

typedef struct _tagADDRESS64 {
    DWORD64 Offset;
    WORD Segment;
    ADDRESS_MODE Mode;
} ADDRESS64  , *LPADDRESS64;

#ifdef _IMAGEHLP64
#define ADDRESS ADDRESS64
#define LPADDRESS LPADDRESS64
#else
typedef struct _tagADDRESS {
    DWORD Offset;
    WORD Segment;
    ADDRESS_MODE Mode;
} ADDRESS  , *LPADDRESS;

__inline void Address32To64(LPADDRESS a32, LPADDRESS64 a64)
{
    a64->Offset = (ULONG64)(LONG64)(LONG)a32->Offset;
    a64->Segment = a32->Segment;
    a64->Mode = a32->Mode;
}

__inline void Address64To32(LPADDRESS64 a64, LPADDRESS a32)
{
    a32->Offset = (ULONG)a64->Offset;
    a32->Segment = a64->Segment;
    a32->Mode = a64->Mode;
}
#endif

typedef struct _KDHELP64 {
    DWORD64 Thread;
    DWORD ThCallbackStack;
    DWORD ThCallbackBStore;
    DWORD NextCallback;
    DWORD FramePointer;
    DWORD64 KiCallUserMode;
    DWORD64 KeUserCallbackDispatcher;
    DWORD64 SystemRangeStart;
    DWORD64 Reserved[8];
} KDHELP64, *PKDHELP64;

#ifdef _IMAGEHLP64
#define KDHELP KDHELP64
#define PKDHELP PKDHELP64
#else
typedef struct _KDHELP {
    DWORD Thread;
    DWORD ThCallbackStack;
    DWORD NextCallback;
    DWORD FramePointer;
    DWORD KiCallUserMode;
    DWORD KeUserCallbackDispatcher;
    DWORD SystemRangeStart;
    DWORD ThCallbackBStore;
    DWORD Reserved[8];
} KDHELP, *PKDHELP;

__inline void KdHelp32To64(PKDHELP p32, PKDHELP64 p64)
{
    p64->Thread = p32->Thread;
    p64->ThCallbackStack = p32->ThCallbackStack;
    p64->NextCallback = p32->NextCallback;
    p64->FramePointer = p32->FramePointer;
    p64->KiCallUserMode = p32->KiCallUserMode;
    p64->KeUserCallbackDispatcher = p32->KeUserCallbackDispatcher;
    p64->SystemRangeStart = p32->SystemRangeStart;
}
#endif /* _IMAGEHLP64 */

typedef struct _tagSTACKFRAME64 {
    ADDRESS64 AddrPC;
    ADDRESS64 AddrReturn;
    ADDRESS64 AddrFrame;
    ADDRESS64 AddrStack;
    ADDRESS64 AddrBStore;
    PVOID FuncTableEntry;
    DWORD64 Params[4];
    BOOL Far;
    BOOL Virtual;
    DWORD64 Reserved[3];
    KDHELP64 KdHelp;
} STACKFRAME64  , *LPSTACKFRAME64;

#ifdef _IMAGEHLP64
#define STACKFRAME STACKFRAME64
#define LPSTACKFRAME LPSTACKFRAME64
#else
typedef struct _tagSTACKFRAME {
    ADDRESS AddrPC;
    ADDRESS AddrReturn;
    ADDRESS AddrFrame;
    ADDRESS AddrStack;
    PVOID FuncTableEntry;
    DWORD Params[4];
    BOOL Far;
    BOOL Virtual;
    DWORD Reserved[3];
    KDHELP KdHelp;
    ADDRESS AddrBStore;
} STACKFRAME  , *LPSTACKFRAME;
#endif /* _IMAGEHLP64 */

typedef BOOL (__stdcall *PREAD_PROCESS_MEMORY_ROUTINE64)(HANDLE,DWORD64,PVOID,DWORD,LPDWORD);
typedef PVOID (__stdcall *PFUNCTION_TABLE_ACCESS_ROUTINE64)(HANDLE,DWORD64);
typedef DWORD64 (__stdcall *PGET_MODULE_BASE_ROUTINE64)(HANDLE,DWORD64);
typedef DWORD64 (__stdcall *PTRANSLATE_ADDRESS_ROUTINE64)(HANDLE,HANDLE,LPADDRESS64);

BOOL IMAGEAPI StackWalk64(DWORD,HANDLE,HANDLE,LPSTACKFRAME64,PVOID,PREAD_PROCESS_MEMORY_ROUTINE64,PFUNCTION_TABLE_ACCESS_ROUTINE64,PGET_MODULE_BASE_ROUTINE64,PTRANSLATE_ADDRESS_ROUTINE64);

#ifdef _IMAGEHLP64
#define PREAD_PROCESS_MEMORY_ROUTINE PREAD_PROCESS_MEMORY_ROUTINE64
#define PFUNCTION_TABLE_ACCESS_ROUTINE PFUNCTION_TABLE_ACCESS_ROUTINE64
#define PGET_MODULE_BASE_ROUTINE PGET_MODULE_BASE_ROUTINE64
#define PTRANSLATE_ADDRESS_ROUTINE PTRANSLATE_ADDRESS_ROUTINE64
#define StackWalk StackWalk64
#else
typedef BOOL (__stdcall *PREAD_PROCESS_MEMORY_ROUTINE)(HANDLE,DWORD,PVOID,DWORD,PDWORD);
typedef PVOID (__stdcall *PFUNCTION_TABLE_ACCESS_ROUTINE)(HANDLE,DWORD);
typedef DWORD (__stdcall *PGET_MODULE_BASE_ROUTINE)(HANDLE,DWORD);
typedef DWORD (__stdcall *PTRANSLATE_ADDRESS_ROUTINE)(HANDLE,HANDLE,LPADDRESS);
BOOL IMAGEAPI StackWalk(DWORD,HANDLE,HANDLE,LPSTACKFRAME,PVOID,PREAD_PROCESS_MEMORY_ROUTINE,PFUNCTION_TABLE_ACCESS_ROUTINE,PGET_MODULE_BASE_ROUTINE,PTRANSLATE_ADDRESS_ROUTINE);
#endif /* _IMAGEHLP64 */

typedef struct API_VERSION {
    USHORT MajorVersion;
    USHORT MinorVersion;
    USHORT Revision;
    USHORT Reserved;
} API_VERSION, *LPAPI_VERSION;

LPAPI_VERSION IMAGEAPI ImagehlpApiVersion(VOID);
LPAPI_VERSION IMAGEAPI ImagehlpApiVersionEx(LPAPI_VERSION);
DWORD IMAGEAPI GetTimestampForLoadedLibrary(HMODULE);

typedef BOOL (CALLBACK *PSYM_ENUMMODULES_CALLBACK64)(PSTR,DWORD64,PVOID);
typedef BOOL (CALLBACK *PSYM_ENUMSYMBOLS_CALLBACK64)(PSTR,DWORD64,ULONG,PVOID);
typedef BOOL (CALLBACK *PSYM_ENUMSYMBOLS_CALLBACK64W)(PWSTR,DWORD64,ULONG,PVOID);
typedef BOOL (CALLBACK *PENUMLOADED_MODULES_CALLBACK64)(PSTR,DWORD64,ULONG,PVOID);
typedef BOOL (CALLBACK *PSYMBOL_REGISTERED_CALLBACK64)(HANDLE,ULONG,ULONG64,ULONG64);
typedef PVOID (CALLBACK *PSYMBOL_FUNCENTRY_CALLBACK)(HANDLE,DWORD,PVOID);
typedef PVOID (CALLBACK *PSYMBOL_FUNCENTRY_CALLBACK64)(HANDLE,ULONG64,ULONG64);

#ifdef _IMAGEHLP64
#define PSYM_ENUMMODULES_CALLBACK PSYM_ENUMMODULES_CALLBACK64
#define PSYM_ENUMSYMBOLS_CALLBACK PSYM_ENUMSYMBOLS_CALLBACK64
#define PSYM_ENUMSYMBOLS_CALLBACKW PSYM_ENUMSYMBOLS_CALLBACK64W
#define PENUMLOADED_MODULES_CALLBACK PENUMLOADED_MODULES_CALLBACK64
#define PSYMBOL_REGISTERED_CALLBACK PSYMBOL_REGISTERED_CALLBACK64
#define PSYMBOL_FUNCENTRY_CALLBACK PSYMBOL_FUNCENTRY_CALLBACK64
#else
typedef BOOL (CALLBACK *PSYM_ENUMMODULES_CALLBACK)(PSTR,ULONG,PVOID);
typedef BOOL (CALLBACK *PSYM_ENUMSYMBOLS_CALLBACK)(PSTR,ULONG,ULONG,PVOID);
typedef BOOL (CALLBACK *PSYM_ENUMSYMBOLS_CALLBACKW)(PWSTR,ULONG,ULONG,PVOID);
typedef BOOL (CALLBACK *PENUMLOADED_MODULES_CALLBACK)(PSTR,ULONG,ULONG,PVOID);
typedef BOOL (CALLBACK *PSYMBOL_REGISTERED_CALLBACK)(HANDLE,ULONG,PVOID,PVOID);
#endif /* _IMAGEHLP64 */

typedef enum {
    SymNone = 0,
    SymCoff,
    SymCv,
    SymPdb,
    SymExport,
    SymDeferred,
    SymSym,
    SymDia,
    SymVirtual,
    NumSymTypes
} SYM_TYPE;

typedef struct _IMAGEHLP_SYMBOL64 {
    DWORD SizeOfStruct;
    DWORD64 Address;
    DWORD Size;
    DWORD Flags;
    DWORD MaxNameLength;
    CHAR Name[1];
} IMAGEHLP_SYMBOL64, *PIMAGEHLP_SYMBOL64;

typedef struct _IMAGEHLP_SYMBOL64_PACKAGE {
    IMAGEHLP_SYMBOL64 sym;
    CHAR name[MAX_SYM_NAME+1];
} IMAGEHLP_SYMBOL64_PACKAGE, *PIMAGEHLP_SYMBOL64_PACKAGE;

#ifdef _IMAGEHLP64
#define IMAGEHLP_SYMBOL IMAGEHLP_SYMBOL64
#define PIMAGEHLP_SYMBOL PIMAGEHLP_SYMBOL64
#define IMAGEHLP_SYMBOL_PACKAGE IMAGEHLP_SYMBOL64_PACKAGE
#define PIMAGEHLP_SYMBOL_PACKAGE PIMAGEHLP_SYMBOL64_PACKAGE
#else
typedef struct _IMAGEHLP_SYMBOL {
    DWORD SizeOfStruct;
    DWORD Address;
    DWORD Size;
    DWORD Flags;
    DWORD MaxNameLength;
    CHAR Name[1];
} IMAGEHLP_SYMBOL, *PIMAGEHLP_SYMBOL;

typedef struct _IMAGEHLP_SYMBOL_PACKAGE {
    IMAGEHLP_SYMBOL sym;
    CHAR name[MAX_SYM_NAME+1];
} IMAGEHLP_SYMBOL_PACKAGE, *PIMAGEHLP_SYMBOL_PACKAGE;
#endif /* _IMAGEHLP64 */

typedef struct _IMAGEHLP_MODULE64 {
    DWORD SizeOfStruct;
    DWORD64 BaseOfImage;
    DWORD ImageSize;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD NumSyms;
    SYM_TYPE SymType;
    CHAR ModuleName[32];
    CHAR ImageName[256];
    CHAR LoadedImageName[256];
    CHAR LoadedPdbName[256];
    DWORD CVSig;
    CHAR CVData[MAX_PATH * 3];
    DWORD PdbSig;
    GUID PdbSig70;
    DWORD PdbAge;
    BOOL PdbUnmatched;
    BOOL DbgUnmatched;
    BOOL LineNumbers;
    BOOL GlobalSymbols;
    BOOL TypeInfo;
} IMAGEHLP_MODULE64, *PIMAGEHLP_MODULE64;

typedef struct _IMAGEHLP_MODULE64W {
    DWORD SizeOfStruct;
    DWORD64 BaseOfImage;
    DWORD ImageSize;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD NumSyms;
    SYM_TYPE SymType;
    WCHAR ModuleName[32];
    WCHAR ImageName[256];
    WCHAR LoadedImageName[256];
    WCHAR LoadedPdbName[256];
    DWORD CVSig;
    WCHAR CVData[MAX_PATH * 3];
    DWORD PdbSig;
    GUID PdbSig70;
    DWORD PdbAge;
    BOOL PdbUnmatched;
    BOOL DbgUnmatched;
    BOOL LineNumbers;
    BOOL GlobalSymbols;
    BOOL TypeInfo;
} IMAGEHLP_MODULEW64, *PIMAGEHLP_MODULEW64;

#ifdef _IMAGEHLP64
#define IMAGEHLP_MODULE IMAGEHLP_MODULE64
#define PIMAGEHLP_MODULE PIMAGEHLP_MODULE64
#define IMAGEHLP_MODULEW IMAGEHLP_MODULEW64
#define PIMAGEHLP_MODULEW PIMAGEHLP_MODULEW64
#else
typedef struct _IMAGEHLP_MODULE {
    DWORD SizeOfStruct;
    DWORD BaseOfImage;
    DWORD ImageSize;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD NumSyms;
    SYM_TYPE SymType;
    CHAR ModuleName[32];
    CHAR ImageName[256];
    CHAR LoadedImageName[256];
} IMAGEHLP_MODULE, *PIMAGEHLP_MODULE;

typedef struct _IMAGEHLP_MODULEW {
    DWORD SizeOfStruct;
    DWORD BaseOfImage;
    DWORD ImageSize;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD NumSyms;
    SYM_TYPE SymType;
    WCHAR ModuleName[32];
    WCHAR ImageName[256];
    WCHAR LoadedImageName[256];
} IMAGEHLP_MODULEW, *PIMAGEHLP_MODULEW;
#endif /* _IMAGEHLP64 */

typedef struct _IMAGEHLP_LINE64 {
    DWORD SizeOfStruct;
    PVOID Key;
    DWORD LineNumber;
    PCHAR FileName;
    DWORD64 Address;
} IMAGEHLP_LINE64, *PIMAGEHLP_LINE64;

#ifdef _IMAGEHLP64
#define IMAGEHLP_LINE IMAGEHLP_LINE64
#define PIMAGEHLP_LINE PIMAGEHLP_LINE64
#else
typedef struct _IMAGEHLP_LINE {
    DWORD SizeOfStruct;
    PVOID Key;
    DWORD LineNumber;
    PCHAR FileName;
    DWORD Address;
} IMAGEHLP_LINE, *PIMAGEHLP_LINE;
#endif /* _IMAGEHLP64 */

typedef struct _SOURCEFILE {
    DWORD64 ModBase;
    PCHAR FileName;
} SOURCEFILE, *PSOURCEFILE;

typedef struct _IMAGEHLP_CBA_READ_MEMORY {
    DWORD64 addr;
    PVOID buf;
    DWORD bytes;
    DWORD *bytesread;
} IMAGEHLP_CBA_READ_MEMORY, *PIMAGEHLP_CBA_READ_MEMORY;

enum {
    sevInfo = 0,
    sevProblem,
    sevAttn,
    sevFatal,
    sevMax
};

typedef struct _IMAGEHLP_CBA_EVENT {
    DWORD severity;
    DWORD code;
    PCHAR desc;
    PVOID object;
} IMAGEHLP_CBA_EVENT, *PIMAGEHLP_CBA_EVENT;

typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD64 {
    DWORD SizeOfStruct;
    DWORD64 BaseOfImage;
    DWORD CheckSum;
    DWORD TimeDateStamp;
    CHAR FileName[MAX_PATH];
    BOOLEAN Reparse;
    HANDLE hFile;
    DWORD Flags;
} IMAGEHLP_DEFERRED_SYMBOL_LOAD64, *PIMAGEHLP_DEFERRED_SYMBOL_LOAD64;

#ifdef _IMAGEHLP64
#define IMAGEHLP_DEFERRED_SYMBOL_LOAD IMAGEHLP_DEFERRED_SYMBOL_LOAD64
#define PIMAGEHLP_DEFERRED_SYMBOL_LOAD PIMAGEHLP_DEFERRED_SYMBOL_LOAD64
#else
typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD {
    DWORD SizeOfStruct;
    DWORD BaseOfImage;
    DWORD CheckSum;
    DWORD TimeDateStamp;
    CHAR FileName[MAX_PATH];
    BOOLEAN Reparse;
    HANDLE hFile;
} IMAGEHLP_DEFERRED_SYMBOL_LOAD, *PIMAGEHLP_DEFERRED_SYMBOL_LOAD;
#endif /* _IMAGEHLP64 */

typedef struct _IMAGEHLP_DUPLICATE_SYMBOL64 {
    DWORD SizeOfStruct;
    DWORD NumberOfDups;
    PIMAGEHLP_SYMBOL64 Symbol;
    DWORD SelectedSymbol;
} IMAGEHLP_DUPLICATE_SYMBOL64, *PIMAGEHLP_DUPLICATE_SYMBOL64;

#ifdef _IMAGEHLP64
#define IMAGEHLP_DUPLICATE_SYMBOL IMAGEHLP_DUPLICATE_SYMBOL64
#define PIMAGEHLP_DUPLICATE_SYMBOL PIMAGEHLP_DUPLICATE_SYMBOL64
#else
typedef struct _IMAGEHLP_DUPLICATE_SYMBOL {
    DWORD SizeOfStruct;
    DWORD NumberOfDups;
    PIMAGEHLP_SYMBOL Symbol;
    DWORD SelectedSymbol;
} IMAGEHLP_DUPLICATE_SYMBOL, *PIMAGEHLP_DUPLICATE_SYMBOL;
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymSetParentWindow(HWND);
PCHAR IMAGEAPI SymSetHomeDirectory(PCSTR);
PCHAR IMAGEAPI SymGetHomeDirectory(DWORD,PSTR,size_t);

/*typedef*/ enum {
    hdBase = 0,
    hdSym,
    hdSrc,
    hdMax
};

typedef BOOL (CALLBACK *PSYM_ENUMSOURCFILES_CALLBACK)(PSOURCEFILE,PVOID);

DWORD IMAGEAPI SymSetOptions(DWORD);
DWORD IMAGEAPI SymGetOptions(VOID);
BOOL IMAGEAPI SymCleanup(HANDLE);
BOOL IMAGEAPI SymMatchString(LPSTR,LPSTR,BOOL);
BOOL IMAGEAPI SymEnumSourceFiles(HANDLE,ULONG64,LPSTR,PSYM_ENUMSOURCFILES_CALLBACK,PVOID);
BOOL IMAGEAPI SymEnumerateModules64(HANDLE,PSYM_ENUMMODULES_CALLBACK64,PVOID);

#ifdef _IMAGEHLP64
#define SymEnumerateModules SymEnumerateModules64
#else
BOOL IMAGEAPI SymEnumerateModules(HANDLE,PSYM_ENUMMODULES_CALLBACK,PVOID);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymEnumerateSymbols64(HANDLE,DWORD64,PSYM_ENUMSYMBOLS_CALLBACK64,PVOID);
BOOL IMAGEAPI SymEnumerateSymbolsW64(HANDLE,DWORD64,PSYM_ENUMSYMBOLS_CALLBACK64W,PVOID);

#ifdef _IMAGEHLP64
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL IMAGEAPI SymEnumerateSymbols(HANDLE,DWORD,PSYM_ENUMSYMBOLS_CALLBACK,PVOID);
BOOL IMAGEAPI SymEnumerateSymbolsW(HANDLE,DWORD,PSYM_ENUMSYMBOLS_CALLBACKW,PVOID);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI EnumerateLoadedModules64(HANDLE,PENUMLOADED_MODULES_CALLBACK64,PVOID);

#ifdef _IMAGEHLP64
#define EnumerateLoadedModules EnumerateLoadedModules64
#else
BOOL IMAGEAPI EnumerateLoadedModules(HANDLE,PENUMLOADED_MODULES_CALLBACK,PVOID);
#endif /* _IMAGEHLP64 */

PVOID IMAGEAPI SymFunctionTableAccess64(HANDLE,DWORD64);

#ifdef _IMAGEHLP64
#define SymFunctionTableAccess SymFunctionTableAccess64
#else
PVOID IMAGEAPI SymFunctionTableAccess(HANDLE,DWORD);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymGetModuleInfo64(HANDLE,DWORD64,PIMAGEHLP_MODULE64);
BOOL IMAGEAPI SymGetModuleInfoW64(HANDLE,DWORD64,PIMAGEHLP_MODULEW64);

#ifdef _IMAGEHLP64
#define SymGetModuleInfo SymGetModuleInfo64
#define SymGetModuleInfoW SymGetModuleInfoW64
#else
BOOL IMAGEAPI SymGetModuleInfo(HANDLE,DWORD,PIMAGEHLP_MODULE);
BOOL IMAGEAPI SymGetModuleInfoW(HANDLE,DWORD,PIMAGEHLP_MODULEW);
#endif /* _IMAGEHLP64 */

DWORD64 IMAGEAPI SymGetModuleBase64(HANDLE,DWORD64);

#ifdef _IMAGEHLP64
#define SymGetModuleBase SymGetModuleBase64
#else
DWORD IMAGEAPI SymGetModuleBase(HANDLE,DWORD);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymGetSymNext64(HANDLE,PIMAGEHLP_SYMBOL64);

#ifdef _IMAGEHLP64
#define SymGetSymNext SymGetSymNext64
#else
BOOL IMAGEAPI SymGetSymNext(HANDLE,PIMAGEHLP_SYMBOL);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymGetSymPrev64(HANDLE,PIMAGEHLP_SYMBOL64);

#ifdef _IMAGEHLP64
#define SymGetSymPrev SymGetSymPrev64
#else
BOOL IMAGEAPI SymGetSymPrev(HANDLE,PIMAGEHLP_SYMBOL);
#endif /* _IMAGEHLP64 */

typedef struct _SRCCODEINFO {
    DWORD SizeOfStruct;
    PVOID Key;
    DWORD64 ModBase;
    CHAR Obj[MAX_PATH+1];
    CHAR FileName[MAX_PATH+1];
    DWORD LineNumber;
    DWORD64 Address;
} SRCCODEINFO, *PSRCCODEINFO;

typedef BOOL (CALLBACK *PSYM_ENUMLINES_CALLBACK)(PSRCCODEINFO,PVOID);

BOOL IMAGEAPI SymEnumLines(HANDLE,ULONG64,PCSTR,PCSTR,PSYM_ENUMLINES_CALLBACK,PVOID);
BOOL IMAGEAPI SymGetLineFromAddr64(HANDLE,DWORD64,PDWORD,PIMAGEHLP_LINE64);

#ifdef _IMAGEHLP64
#define SymGetLineFromAddr SymGetLineFromAddr64
#else
BOOL IMAGEAPI SymGetLineFromAddr(HANDLE,DWORD,PDWORD,PIMAGEHLP_LINE);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymGetLineFromName64(HANDLE,PSTR,PSTR,DWORD,PLONG,PIMAGEHLP_LINE64);

#ifdef _IMAGEHLP64
#define SymGetLineFromName SymGetLineFromName64
#else
BOOL IMAGEAPI SymGetLineFromName(HANDLE,PSTR,PSTR,DWORD,PLONG,PIMAGEHLP_LINE);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymGetLineNext64(HANDLE,PIMAGEHLP_LINE64);

#ifdef _IMAGEHLP64
#define SymGetLineNext SymGetLineNext64
#else
BOOL IMAGEAPI SymGetLineNext(HANDLE,PIMAGEHLP_LINE);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymGetLinePrev64(HANDLE,PIMAGEHLP_LINE64);

#ifdef _IMAGEHLP64
#define SymGetLinePrev SymGetLinePrev64
#else
BOOL IMAGEAPI SymGetLinePrev(HANDLE,PIMAGEHLP_LINE);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymMatchFileName(PSTR,PSTR,PSTR*,PSTR*);
BOOL IMAGEAPI SymInitialize(HANDLE,PSTR,BOOL);
BOOL IMAGEAPI SymGetSearchPath(HANDLE,PSTR,DWORD);
BOOL IMAGEAPI SymSetSearchPath(HANDLE,PSTR);
DWORD64 IMAGEAPI SymLoadModule64(HANDLE,HANDLE,PSTR,PSTR,DWORD64,DWORD);
DWORD64 IMAGEAPI SymLoadModuleEx(HANDLE,HANDLE,PSTR,PSTR,DWORD64,DWORD,PMODLOAD_DATA,DWORD);

#ifdef _IMAGEHLP64
#define SymLoadModule SymLoadModule64
#else
DWORD IMAGEAPI SymLoadModule(HANDLE,HANDLE,PSTR,PSTR,DWORD,DWORD);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymUnloadModule64(HANDLE,DWORD64);

#ifdef _IMAGEHLP64
#define SymUnloadModule SymUnloadModule64
#else
BOOL IMAGEAPI SymUnloadModule(HANDLE,DWORD);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymUnDName64(PIMAGEHLP_SYMBOL64,PSTR,DWORD);

#ifdef _IMAGEHLP64
#define SymUnDName SymUnDName64
#else
BOOL IMAGEAPI SymUnDName(PIMAGEHLP_SYMBOL,PSTR,DWORD);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymRegisterCallback64(HANDLE,PSYMBOL_REGISTERED_CALLBACK64,ULONG64);
BOOL IMAGEAPI SymRegisterFunctionEntryCallback64(HANDLE,PSYMBOL_FUNCENTRY_CALLBACK64,ULONG64);

#ifdef _IMAGEHLP64
#define SymRegisterCallback SymRegisterCallback64
#define SymRegisterFunctionEntryCallback SymRegisterFunctionEntryCallback64
#else
BOOL IMAGEAPI SymRegisterCallback(HANDLE,PSYMBOL_REGISTERED_CALLBACK,PVOID);
BOOL IMAGEAPI SymRegisterFunctionEntryCallback(HANDLE,PSYMBOL_FUNCENTRY_CALLBACK,PVOID);
#endif /* _IMAGEHLP64 */

typedef struct _IMAGEHLP_SYMBOL_SRC {
    DWORD sizeofstruct;
    DWORD type;
    char file[MAX_PATH];
} IMAGEHLP_SYMBOL_SRC, *PIMAGEHLP_SYMBOL_SRC;

typedef struct _MODULE_TYPE_INFO {
    USHORT dataLength;
    USHORT leaf;
    BYTE data[1];
} MODULE_TYPE_INFO, *PMODULE_TYPE_INFO;

typedef struct _SYMBOL_INFO {
    ULONG SizeOfStruct;
    ULONG TypeIndex;
    ULONG64 Reserved[2];
    ULONG info;
    ULONG Size;
    ULONG64 ModBase;
    ULONG Flags;
    ULONG64 Value;
    ULONG64 Address;
    ULONG Register;
    ULONG Scope;
    ULONG Tag;
    ULONG NameLen;
    ULONG MaxNameLen;
    CHAR Name[1];
} SYMBOL_INFO, *PSYMBOL_INFO;

typedef struct _SYMBOL_INFO_PACKAGE {
    SYMBOL_INFO si;
    CHAR name[MAX_SYM_NAME+1];
} SYMBOL_INFO_PACKAGE, *PSYMBOL_INFO_PACKAGE;

typedef struct _IMAGEHLP_STACK_FRAME {
    ULONG64 InstructionOffset;
    ULONG64 ReturnOffset;
    ULONG64 FrameOffset;
    ULONG64 StackOffset;
    ULONG64 BackingStoreOffset;
    ULONG64 FuncTableEntry;
    ULONG64 Params[4];
    ULONG64 Reserved[5];
    BOOL Virtual;
    ULONG Reserved2;
} IMAGEHLP_STACK_FRAME, *PIMAGEHLP_STACK_FRAME;

typedef VOID IMAGEHLP_CONTEXT, *PIMAGEHLP_CONTEXT;
typedef BOOL (CALLBACK *PSYM_ENUMERATESYMBOLS_CALLBACK)(PSYMBOL_INFO,ULONG,PVOID);

BOOL IMAGEAPI SymSetContext(HANDLE,PIMAGEHLP_STACK_FRAME,PIMAGEHLP_CONTEXT);
BOOL IMAGEAPI SymFromAddr(HANDLE,DWORD64,PDWORD64,PSYMBOL_INFO);
BOOL IMAGEAPI SymFromToken(HANDLE,DWORD64,DWORD,PSYMBOL_INFO);
BOOL IMAGEAPI SymFromName(HANDLE,LPSTR,PSYMBOL_INFO);
BOOL IMAGEAPI SymEnumSymbols(HANDLE,ULONG64,PCSTR,PSYM_ENUMERATESYMBOLS_CALLBACK,PVOID);
BOOL IMAGEAPI SymEnumSymbolsForAddr(HANDLE,DWORD64,PSYM_ENUMERATESYMBOLS_CALLBACK,PVOID);

typedef enum _IMAGEHLP_SYMBOL_TYPE_INFO {
    TI_GET_SYMTAG,
    TI_GET_SYMNAME,
    TI_GET_LENGTH,
    TI_GET_TYPE,
    TI_GET_TYPEID,
    TI_GET_BASETYPE,
    TI_GET_ARRAYINDEXTYPEID,
    TI_FINDCHILDREN,
    TI_GET_DATAKIND,
    TI_GET_ADDRESSOFFSET,
    TI_GET_OFFSET,
    TI_GET_VALUE,
    TI_GET_COUNT,
    TI_GET_CHILDRENCOUNT,
    TI_GET_BITPOSITION,
    TI_GET_VIRTUALBASECLASS,
    TI_GET_VIRTUALTABLESHAPEID,
    TI_GET_VIRTUALBASEPOINTEROFFSET,
    TI_GET_CLASSPARENTID,
    TI_GET_NESTED,
    TI_GET_SYMINDEX,
    TI_GET_LEXICALPARENT,
    TI_GET_ADDRESS,
    TI_GET_THISADJUST,
    TI_GET_UDTKIND,
    TI_IS_EQUIV_TO,
    TI_GET_CALLING_CONVENTION,
} IMAGEHLP_SYMBOL_TYPE_INFO;

typedef struct _TI_FINDCHILDREN_PARAMS {
    ULONG Count;
    ULONG Start;
    ULONG ChildId[1];
} TI_FINDCHILDREN_PARAMS;

typedef BOOL (WINAPI *PDBGHELP_CREATE_USER_DUMP_CALLBACK)(DWORD,PVOID*,LPDWORD,PVOID);

BOOL IMAGEAPI SymGetTypeInfo(HANDLE,DWORD64,ULONG,IMAGEHLP_SYMBOL_TYPE_INFO,PVOID);
BOOL IMAGEAPI SymEnumTypes(HANDLE,ULONG64,PSYM_ENUMERATESYMBOLS_CALLBACK,PVOID);
BOOL IMAGEAPI SymGetTypeFromName(HANDLE,ULONG64,LPSTR,PSYMBOL_INFO);
BOOL IMAGEAPI SymAddSymbol(HANDLE,ULONG64,PCSTR,DWORD64,DWORD,DWORD);
BOOL IMAGEAPI SymDeleteSymbol(HANDLE,ULONG64,PCSTR,DWORD64,DWORD);
BOOL WINAPI DbgHelpCreateUserDump(LPSTR,PDBGHELP_CREATE_USER_DUMP_CALLBACK,PVOID);
BOOL WINAPI DbgHelpCreateUserDumpW(LPWSTR,PDBGHELP_CREATE_USER_DUMP_CALLBACK,PVOID);
BOOL IMAGEAPI SymGetSymFromAddr64(HANDLE,DWORD64,PDWORD64,PIMAGEHLP_SYMBOL64);

#ifdef _IMAGEHLP64
#define SymGetSymFromAddr SymGetSymFromAddr64
#else
BOOL IMAGEAPI SymGetSymFromAddr(HANDLE,DWORD,PDWORD,PIMAGEHLP_SYMBOL);
#endif /* _IMAGEHLP64 */

BOOL IMAGEAPI SymGetSymFromName64(HANDLE,PSTR,PIMAGEHLP_SYMBOL64);

#ifdef _IMAGEHLP64
#define SymGetSymFromName SymGetSymFromName64
#else
BOOL IMAGEAPI SymGetSymFromName(HANDLE,PSTR,PIMAGEHLP_SYMBOL);
#endif /* _IMAGEHLP64 */

DBHLP_DEPRECIATED BOOL IMAGEAPI FindFileInPath(HANDLE,LPSTR,LPSTR,PVOID,DWORD,DWORD,DWORD,LPSTR);
DBHLP_DEPRECIATED BOOL IMAGEAPI FindFileInSearchPath(HANDLE,LPSTR,LPSTR,DWORD,DWORD,DWORD,LPSTR);
DBHLP_DEPRECIATED BOOL IMAGEAPI SymEnumSym(HANDLE,ULONG64,PSYM_ENUMERATESYMBOLS_CALLBACK,PVOID);

#include <pshpack4.h>

#define MINIDUMP_SIGNATURE  ('PMDM')
#define MINIDUMP_VERSION  (42899)
typedef DWORD RVA;
typedef ULONG64 RVA64;

typedef struct _MINIDUMP_LOCATION_DESCRIPTOR {
    ULONG32 DataSize;
    RVA Rva;
} MINIDUMP_LOCATION_DESCRIPTOR;

typedef struct _MINIDUMP_LOCATION_DESCRIPTOR64 {
    ULONG64 DataSize;
    RVA64 Rva;
} MINIDUMP_LOCATION_DESCRIPTOR64;

typedef struct _MINIDUMP_MEMORY_DESCRIPTOR {
    ULONG64 StartOfMemoryRange;
    MINIDUMP_LOCATION_DESCRIPTOR Memory;
} MINIDUMP_MEMORY_DESCRIPTOR, *PMINIDUMP_MEMORY_DESCRIPTOR;

typedef struct _MINIDUMP_MEMORY_DESCRIPTOR64 {
    ULONG64 StartOfMemoryRange;
    ULONG64 DataSize;
} MINIDUMP_MEMORY_DESCRIPTOR64, *PMINIDUMP_MEMORY_DESCRIPTOR64;

typedef struct _MINIDUMP_HEADER {
    ULONG32 Signature;
    ULONG32 Version;
    ULONG32 NumberOfStreams;
    RVA StreamDirectoryRva;
    ULONG32 CheckSum;
    union {
        ULONG32 Reserved;
        ULONG32 TimeDateStamp;
    };
    ULONG64 Flags;
} MINIDUMP_HEADER, *PMINIDUMP_HEADER;

typedef struct _MINIDUMP_DIRECTORY {
    ULONG32 StreamType;
    MINIDUMP_LOCATION_DESCRIPTOR Location;
} MINIDUMP_DIRECTORY, *PMINIDUMP_DIRECTORY;


typedef struct _MINIDUMP_STRING {
    ULONG32 Length;
    WCHAR Buffer[0];
} MINIDUMP_STRING, *PMINIDUMP_STRING;

typedef enum _MINIDUMP_STREAM_TYPE {
    UnusedStream = 0,
    ReservedStream0 = 1,
    ReservedStream1 = 2,
    ThreadListStream = 3,
    ModuleListStream = 4,
    MemoryListStream = 5,
    ExceptionStream = 6,
    SystemInfoStream = 7,
    ThreadExListStream = 8,
    Memory64ListStream = 9,
    CommentStreamA = 10,
    CommentStreamW = 11,
    HandleDataStream = 12,
    FunctionTableStream = 13,
    UnloadedModuleListStream = 14,
    MiscInfoStream = 15,
    LastReservedStream = 0xffff
} MINIDUMP_STREAM_TYPE;

typedef union _CPU_INFORMATION {
    struct {
        ULONG32 VendorId[3];
        ULONG32 VersionInformation;
        ULONG32 FeatureInformation;
        ULONG32 AMDExtendedCpuFeatures;
    } X86CpuInfo;
    struct {
        ULONG64 ProcessorFeatures[2];
    } OtherCpuInfo;
} CPU_INFORMATION, *PCPU_INFORMATION;

typedef struct _MINIDUMP_SYSTEM_INFO {
    USHORT ProcessorArchitecture;
    USHORT ProcessorLevel;
    USHORT ProcessorRevision;
    union {
        USHORT Reserved0;
        struct {
            UCHAR NumberOfProcessors;
            UCHAR ProductType;
        };
    };
    ULONG32 MajorVersion;
    ULONG32 MinorVersion;
    ULONG32 BuildNumber;
    ULONG32 PlatformId;
    RVA CSDVersionRva;
    union {
        ULONG32 Reserved1;
        struct {
            USHORT SuiteMask;
            USHORT Reserved2;
        };
    };
    CPU_INFORMATION Cpu;
} MINIDUMP_SYSTEM_INFO, *PMINIDUMP_SYSTEM_INFO;

C_ASSERT(sizeof(((PPROCESS_INFORMATION)0)->dwThreadId) == 4);

typedef struct _MINIDUMP_THREAD {
    ULONG32 ThreadId;
    ULONG32 SuspendCount;
    ULONG32 PriorityClass;
    ULONG32 Priority;
    ULONG64 Teb;
    MINIDUMP_MEMORY_DESCRIPTOR Stack;
    MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
} MINIDUMP_THREAD, *PMINIDUMP_THREAD;

typedef struct _MINIDUMP_THREAD_LIST {
    ULONG32 NumberOfThreads;
    MINIDUMP_THREAD Threads[0];
} MINIDUMP_THREAD_LIST, *PMINIDUMP_THREAD_LIST;

typedef struct _MINIDUMP_THREAD_EX {
    ULONG32 ThreadId;
    ULONG32 SuspendCount;
    ULONG32 PriorityClass;
    ULONG32 Priority;
    ULONG64 Teb;
    MINIDUMP_MEMORY_DESCRIPTOR Stack;
    MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
    MINIDUMP_MEMORY_DESCRIPTOR BackingStore;
} MINIDUMP_THREAD_EX, *PMINIDUMP_THREAD_EX;

typedef struct _MINIDUMP_THREAD_EX_LIST {
    ULONG32 NumberOfThreads;
    MINIDUMP_THREAD_EX Threads[0];
} MINIDUMP_THREAD_EX_LIST, *PMINIDUMP_THREAD_EX_LIST;

typedef struct _MINIDUMP_EXCEPTION {
    ULONG32 ExceptionCode;
    ULONG32 ExceptionFlags;
    ULONG64 ExceptionRecord;
    ULONG64 ExceptionAddress;
    ULONG32 NumberParameters;
    ULONG32 __unusedAlignment;
    ULONG64 ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];
} MINIDUMP_EXCEPTION, *PMINIDUMP_EXCEPTION;

typedef struct MINIDUMP_EXCEPTION_STREAM {
    ULONG32 ThreadId;
    ULONG32 __alignment;
    MINIDUMP_EXCEPTION ExceptionRecord;
    MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
} MINIDUMP_EXCEPTION_STREAM, *PMINIDUMP_EXCEPTION_STREAM;

typedef struct _MINIDUMP_MODULE {
    ULONG64 BaseOfImage;
    ULONG32 SizeOfImage;
    ULONG32 CheckSum;
    ULONG32 TimeDateStamp;
    RVA ModuleNameRva;
    VS_FIXEDFILEINFO VersionInfo;
    MINIDUMP_LOCATION_DESCRIPTOR CvRecord;
    MINIDUMP_LOCATION_DESCRIPTOR MiscRecord;
    ULONG64 Reserved0;
    ULONG64 Reserved1;
} MINIDUMP_MODULE, *PMINIDUMP_MODULE;

typedef struct _MINIDUMP_MODULE_LIST {
    ULONG32 NumberOfModules;
    MINIDUMP_MODULE Modules[0];
} MINIDUMP_MODULE_LIST, *PMINIDUMP_MODULE_LIST;

typedef struct _MINIDUMP_MEMORY_LIST {
    ULONG32 NumberOfMemoryRanges;
    MINIDUMP_MEMORY_DESCRIPTOR MemoryRanges[0];
} MINIDUMP_MEMORY_LIST, *PMINIDUMP_MEMORY_LIST;

typedef struct _MINIDUMP_MEMORY64_LIST {
    ULONG64 NumberOfMemoryRanges;
    RVA64 BaseRva;
    MINIDUMP_MEMORY_DESCRIPTOR64 MemoryRanges[0];
} MINIDUMP_MEMORY64_LIST, *PMINIDUMP_MEMORY64_LIST;

typedef struct _MINIDUMP_EXCEPTION_INFORMATION {
    DWORD ThreadId;
    PEXCEPTION_POINTERS ExceptionPointers;
    BOOL ClientPointers;
} MINIDUMP_EXCEPTION_INFORMATION, *PMINIDUMP_EXCEPTION_INFORMATION;

typedef struct _MINIDUMP_EXCEPTION_INFORMATION64 {
    DWORD ThreadId;
    ULONG64 ExceptionRecord;
    ULONG64 ContextRecord;
    BOOL ClientPointers;
} MINIDUMP_EXCEPTION_INFORMATION64, *PMINIDUMP_EXCEPTION_INFORMATION64;

typedef struct _MINIDUMP_HANDLE_DESCRIPTOR {
    ULONG64 Handle;
    RVA TypeNameRva;
    RVA ObjectNameRva;
    ULONG32 Attributes;
    ULONG32 GrantedAccess;
    ULONG32 HandleCount;
    ULONG32 PointerCount;
} MINIDUMP_HANDLE_DESCRIPTOR, *PMINIDUMP_HANDLE_DESCRIPTOR;

typedef struct _MINIDUMP_HANDLE_DATA_STREAM {
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfDescriptor;
    ULONG32 NumberOfDescriptors;
    ULONG32 Reserved;
} MINIDUMP_HANDLE_DATA_STREAM, *PMINIDUMP_HANDLE_DATA_STREAM;

typedef struct _MINIDUMP_FUNCTION_TABLE_DESCRIPTOR {
    ULONG64 MinimumAddress;
    ULONG64 MaximumAddress;
    ULONG64 BaseAddress;
    ULONG32 EntryCount;
    ULONG32 SizeOfAlignPad;
} MINIDUMP_FUNCTION_TABLE_DESCRIPTOR, *PMINIDUMP_FUNCTION_TABLE_DESCRIPTOR;

typedef struct _MINIDUMP_FUNCTION_TABLE_STREAM {
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfDescriptor;
    ULONG32 SizeOfNativeDescriptor;
    ULONG32 SizeOfFunctionEntry;
    ULONG32 NumberOfDescriptors;
    ULONG32 SizeOfAlignPad;
} MINIDUMP_FUNCTION_TABLE_STREAM, *PMINIDUMP_FUNCTION_TABLE_STREAM;

typedef struct _MINIDUMP_UNLOADED_MODULE {
    ULONG64 BaseOfImage;
    ULONG32 SizeOfImage;
    ULONG32 CheckSum;
    ULONG32 TimeDateStamp;
    RVA ModuleNameRva;
} MINIDUMP_UNLOADED_MODULE, *PMINIDUMP_UNLOADED_MODULE;

typedef struct _MINIDUMP_UNLOADED_MODULE_LIST {
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfEntry;
    ULONG32 NumberOfEntries;
} MINIDUMP_UNLOADED_MODULE_LIST, *PMINIDUMP_UNLOADED_MODULE_LIST;

typedef struct _MINIDUMP_MISC_INFO {
    ULONG32 SizeOfInfo;
    ULONG32 Flags1;
    ULONG32 ProcessId;
    ULONG32 ProcessCreateTime;
    ULONG32 ProcessUserTime;
    ULONG32 ProcessKernelTime;
} MINIDUMP_MISC_INFO, *PMINIDUMP_MISC_INFO;

typedef struct _MINIDUMP_USER_RECORD {
    ULONG32 Type;
    MINIDUMP_LOCATION_DESCRIPTOR Memory;
} MINIDUMP_USER_RECORD, *PMINIDUMP_USER_RECORD;

typedef struct _MINIDUMP_USER_STREAM {
    ULONG32 Type;
    ULONG BufferSize;
    PVOID Buffer;

} MINIDUMP_USER_STREAM, *PMINIDUMP_USER_STREAM;

typedef struct _MINIDUMP_USER_STREAM_INFORMATION {
    ULONG UserStreamCount;
    PMINIDUMP_USER_STREAM UserStreamArray;
} MINIDUMP_USER_STREAM_INFORMATION, *PMINIDUMP_USER_STREAM_INFORMATION;

typedef enum _MINIDUMP_CALLBACK_TYPE {
    ModuleCallback,
    ThreadCallback,
    ThreadExCallback,
    IncludeThreadCallback,
    IncludeModuleCallback,
    MemoryCallback,
} MINIDUMP_CALLBACK_TYPE;

typedef struct _MINIDUMP_THREAD_CALLBACK {
    ULONG ThreadId;
    HANDLE ThreadHandle;
    CONTEXT Context;
    ULONG SizeOfContext;
    ULONG64 StackBase;
    ULONG64 StackEnd;
} MINIDUMP_THREAD_CALLBACK, *PMINIDUMP_THREAD_CALLBACK;

typedef struct _MINIDUMP_THREAD_EX_CALLBACK {
    ULONG ThreadId;
    HANDLE ThreadHandle;
    CONTEXT Context;
    ULONG SizeOfContext;
    ULONG64 StackBase;
    ULONG64 StackEnd;
    ULONG64 BackingStoreBase;
    ULONG64 BackingStoreEnd;
} MINIDUMP_THREAD_EX_CALLBACK, *PMINIDUMP_THREAD_EX_CALLBACK;

typedef struct _MINIDUMP_INCLUDE_THREAD_CALLBACK {
    ULONG ThreadId;
} MINIDUMP_INCLUDE_THREAD_CALLBACK, *PMINIDUMP_INCLUDE_THREAD_CALLBACK;

typedef enum _THREAD_WRITE_FLAGS {
    ThreadWriteThread = 0x0001,
    ThreadWriteStack = 0x0002,
    ThreadWriteContext = 0x0004,
    ThreadWriteBackingStore = 0x0008,
    ThreadWriteInstructionWindow = 0x0010,
    ThreadWriteThreadData = 0x0020,
} THREAD_WRITE_FLAGS;

typedef struct _MINIDUMP_MODULE_CALLBACK {
    PWCHAR FullPath;
    ULONG64 BaseOfImage;
    ULONG SizeOfImage;
    ULONG CheckSum;
    ULONG TimeDateStamp;
    VS_FIXEDFILEINFO VersionInfo;
    PVOID CvRecord;
    ULONG SizeOfCvRecord;
    PVOID MiscRecord;
    ULONG SizeOfMiscRecord;
} MINIDUMP_MODULE_CALLBACK, *PMINIDUMP_MODULE_CALLBACK;

typedef struct _MINIDUMP_INCLUDE_MODULE_CALLBACK {
    ULONG64 BaseOfImage;
} MINIDUMP_INCLUDE_MODULE_CALLBACK, *PMINIDUMP_INCLUDE_MODULE_CALLBACK;

typedef enum _MODULE_WRITE_FLAGS {
    ModuleWriteModule = 0x0001,
    ModuleWriteDataSeg = 0x0002,
    ModuleWriteMiscRecord = 0x0004,
    ModuleWriteCvRecord = 0x0008,
    ModuleReferencedByMemory = 0x0010
} MODULE_WRITE_FLAGS;

typedef struct _MINIDUMP_CALLBACK_INPUT {
    ULONG ProcessId;
    HANDLE ProcessHandle;
    ULONG CallbackType;
    union {
        MINIDUMP_THREAD_CALLBACK Thread;
        MINIDUMP_THREAD_EX_CALLBACK ThreadEx;
        MINIDUMP_MODULE_CALLBACK Module;
        MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
        MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
    };
} MINIDUMP_CALLBACK_INPUT, *PMINIDUMP_CALLBACK_INPUT;

typedef struct _MINIDUMP_CALLBACK_OUTPUT {
    union {
        ULONG ModuleWriteFlags;
        ULONG ThreadWriteFlags;
        struct {
            ULONG64 MemoryBase;
            ULONG MemorySize;
        };
    };
} MINIDUMP_CALLBACK_OUTPUT, *PMINIDUMP_CALLBACK_OUTPUT;

typedef enum _MINIDUMP_TYPE {
    MiniDumpNormal = 0x0000,
    MiniDumpWithDataSegs = 0x0001,
    MiniDumpWithFullMemory = 0x0002,
    MiniDumpWithHandleData = 0x0004,
    MiniDumpFilterMemory = 0x0008,
    MiniDumpScanMemory = 0x0010,
    MiniDumpWithUnloadedModules = 0x0020,
    MiniDumpWithIndirectlyReferencedMemory = 0x0040,
    MiniDumpFilterModulePaths = 0x0080,
    MiniDumpWithProcessThreadData = 0x0100,
    MiniDumpWithPrivateReadWriteMemory = 0x0200,
    MiniDumpWithoutOptionalData = 0x0400,
} MINIDUMP_TYPE;

typedef BOOL (WINAPI *MINIDUMP_CALLBACK_ROUTINE)(PVOID,CONST PMINIDUMP_CALLBACK_INPUT,PMINIDUMP_CALLBACK_OUTPUT);

typedef struct _MINIDUMP_CALLBACK_INFORMATION {
    MINIDUMP_CALLBACK_ROUTINE CallbackRoutine;
    PVOID CallbackParam;
} MINIDUMP_CALLBACK_INFORMATION, *PMINIDUMP_CALLBACK_INFORMATION;

BOOL WINAPI MiniDumpWriteDump(HANDLE,DWORD,HANDLE,MINIDUMP_TYPE,CONST PMINIDUMP_EXCEPTION_INFORMATION,CONST PMINIDUMP_USER_STREAM_INFORMATION,CONST PMINIDUMP_CALLBACK_INFORMATION);
BOOL WINAPI MiniDumpReadDumpStream(PVOID,ULONG,PMINIDUMP_DIRECTORY*,PVOID*,ULONG*);

#include <poppack.h>

#if __POCC__ >= 290
#pragma warn(pop)
#endif

#ifdef __cplusplus
}
#endif

#endif /* _DBGHELP_H */

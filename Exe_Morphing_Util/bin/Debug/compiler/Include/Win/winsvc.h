#ifndef _WINSVC_H
#define _WINSVC_H

#if __POCC__ >= 500
#pragma once
#endif

/* Windows Service Control Manager definitions */

#ifndef WINADVAPI
#define WINADVAPI DECLSPEC_IMPORT
#endif

#if defined(WIN32_DEFAULT_LIBS)
#pragma comment(lib, "advapi32.lib")
#endif

#ifdef __cplusplus
extern "C" {
#endif

#define SERVICES_ACTIVE_DATABASEW  L"ServicesActive"
#define SERVICES_FAILED_DATABASEW  L"ServicesFailed"
#define SERVICES_ACTIVE_DATABASEA  "ServicesActive"
#define SERVICES_FAILED_DATABASEA  "ServicesFailed"

#define SC_GROUP_IDENTIFIERW  L'+'
#define SC_GROUP_IDENTIFIERA  '+'

#ifdef UNICODE
#define SERVICES_ACTIVE_DATABASE  SERVICES_ACTIVE_DATABASEW
#define SERVICES_FAILED_DATABASE  SERVICES_FAILED_DATABASEW
#define SC_GROUP_IDENTIFIER  SC_GROUP_IDENTIFIERW
#else
#define SERVICES_ACTIVE_DATABASE  SERVICES_ACTIVE_DATABASEA
#define SERVICES_FAILED_DATABASE  SERVICES_FAILED_DATABASEA
#define SC_GROUP_IDENTIFIER  SC_GROUP_IDENTIFIERA
#endif

#define SERVICE_NO_CHANGE  0xFFFFFFFF

#define SERVICE_ACTIVE  0x00000001
#define SERVICE_INACTIVE  0x00000002
#define SERVICE_STATE_ALL  (SERVICE_ACTIVE|SERVICE_INACTIVE)

#define SERVICE_CONTROL_STOP  0x00000001
#define SERVICE_CONTROL_PAUSE  0x00000002
#define SERVICE_CONTROL_CONTINUE  0x00000003
#define SERVICE_CONTROL_INTERROGATE  0x00000004
#define SERVICE_CONTROL_SHUTDOWN  0x00000005
#define SERVICE_CONTROL_PARAMCHANGE  0x00000006
#define SERVICE_CONTROL_NETBINDADD  0x00000007
#define SERVICE_CONTROL_NETBINDREMOVE  0x00000008
#define SERVICE_CONTROL_NETBINDENABLE  0x00000009
#define SERVICE_CONTROL_NETBINDDISABLE  0x0000000A
#define SERVICE_CONTROL_DEVICEEVENT  0x0000000B
#define SERVICE_CONTROL_HARDWAREPROFILECHANGE  0x0000000C
#define SERVICE_CONTROL_POWEREVENT  0x0000000D
#define SERVICE_CONTROL_SESSIONCHANGE  0x0000000E
#define SERVICE_CONTROL_PRESHUTDOWN  0x0000000F

#define SERVICE_STOPPED  0x00000001
#define SERVICE_START_PENDING  0x00000002
#define SERVICE_STOP_PENDING  0x00000003
#define SERVICE_RUNNING  0x00000004
#define SERVICE_CONTINUE_PENDING  0x00000005
#define SERVICE_PAUSE_PENDING  0x00000006
#define SERVICE_PAUSED  0x00000007

#define SERVICE_ACCEPT_STOP  0x00000001
#define SERVICE_ACCEPT_PAUSE_CONTINUE  0x00000002
#define SERVICE_ACCEPT_SHUTDOWN  0x00000004
#define SERVICE_ACCEPT_PARAMCHANGE  0x00000008
#define SERVICE_ACCEPT_NETBINDCHANGE  0x00000010
#define SERVICE_ACCEPT_HARDWAREPROFILECHANGE  0x00000020
#define SERVICE_ACCEPT_POWEREVENT  0x00000040
#define SERVICE_ACCEPT_SESSIONCHANGE  0x00000080
#define SERVICE_ACCEPT_PRESHUTDOWN  0x00000100

#define SC_MANAGER_CONNECT  0x0001
#define SC_MANAGER_CREATE_SERVICE  0x0002
#define SC_MANAGER_ENUMERATE_SERVICE  0x0004
#define SC_MANAGER_LOCK  0x0008
#define SC_MANAGER_QUERY_LOCK_STATUS  0x0010
#define SC_MANAGER_MODIFY_BOOT_CONFIG  0x0020
#define SC_MANAGER_ALL_ACCESS  (STANDARD_RIGHTS_REQUIRED|SC_MANAGER_CONNECT|SC_MANAGER_CREATE_SERVICE|SC_MANAGER_ENUMERATE_SERVICE|SC_MANAGER_LOCK|SC_MANAGER_QUERY_LOCK_STATUS|SC_MANAGER_MODIFY_BOOT_CONFIG)

#define SERVICE_QUERY_CONFIG  0x0001
#define SERVICE_CHANGE_CONFIG  0x0002
#define SERVICE_QUERY_STATUS  0x0004
#define SERVICE_ENUMERATE_DEPENDENTS  0x0008
#define SERVICE_START  0x0010
#define SERVICE_STOP  0x0020
#define SERVICE_PAUSE_CONTINUE  0x0040
#define SERVICE_INTERROGATE  0x0080
#define SERVICE_USER_DEFINED_CONTROL  0x0100
#define SERVICE_ALL_ACCESS  (STANDARD_RIGHTS_REQUIRED|SERVICE_QUERY_CONFIG|SERVICE_CHANGE_CONFIG|SERVICE_QUERY_STATUS|SERVICE_ENUMERATE_DEPENDENTS|SERVICE_START|SERVICE_STOP|SERVICE_PAUSE_CONTINUE| \
    SERVICE_INTERROGATE|SERVICE_USER_DEFINED_CONTROL)

#define SERVICE_RUNS_IN_SYSTEM_PROCESS  0x00000001

#define SERVICE_CONFIG_DESCRIPTION  1
#define SERVICE_CONFIG_FAILURE_ACTIONS  2
#define SERVICE_CONFIG_DELAYED_AUTO_START_INFO  3
#define SERVICE_CONFIG_FAILURE_ACTIONS_FLAG  4
#define SERVICE_CONFIG_SERVICE_SID_INFO  5
#define SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO  6
#define SERVICE_CONFIG_PRESHUTDOWN_INFO  7

#define SERVICE_NOTIFY_STATUS_CHANGE_1  1
#define SERVICE_NOTIFY_STATUS_CHANGE_2  2

#define SERVICE_NOTIFY_STATUS_CHANGE  SERVICE_NOTIFY_STATUS_CHANGE_2

#define SERVICE_NOTIFY_STOPPED  0x00000001
#define SERVICE_NOTIFY_START_PENDING  0x00000002
#define SERVICE_NOTIFY_STOP_PENDING  0x00000004
#define SERVICE_NOTIFY_RUNNING  0x00000008
#define SERVICE_NOTIFY_CONTINUE_PENDING  0x00000010
#define SERVICE_NOTIFY_PAUSE_PENDING  0x00000020
#define SERVICE_NOTIFY_PAUSED  0x00000040
#define SERVICE_NOTIFY_CREATED  0x00000080
#define SERVICE_NOTIFY_DELETED  0x00000100
#define SERVICE_NOTIFY_DELETE_PENDING  0x00000200

#define SERVICE_STOP_REASON_FLAG_MIN  0x00000000
#define SERVICE_STOP_REASON_FLAG_UNPLANNED  0x10000000
#define SERVICE_STOP_REASON_FLAG_CUSTOM  0x20000000
#define SERVICE_STOP_REASON_FLAG_PLANNED  0x40000000
#define SERVICE_STOP_REASON_FLAG_MAX  0x80000000

#define SERVICE_STOP_REASON_MAJOR_MIN  0x00000000
#define SERVICE_STOP_REASON_MAJOR_OTHER  0x00010000
#define SERVICE_STOP_REASON_MAJOR_HARDWARE  0x00020000
#define SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM  0x00030000
#define SERVICE_STOP_REASON_MAJOR_SOFTWARE  0x00040000
#define SERVICE_STOP_REASON_MAJOR_APPLICATION  0x00050000
#define SERVICE_STOP_REASON_MAJOR_NONE  0x00060000
#define SERVICE_STOP_REASON_MAJOR_MAX  0x00070000 
#define SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM  0x00400000
#define SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM  0x00ff0000

#define SERVICE_STOP_REASON_MINOR_MIN  0x00000000
#define SERVICE_STOP_REASON_MINOR_OTHER  0x00000001
#define SERVICE_STOP_REASON_MINOR_MAINTENANCE  0x00000002
#define SERVICE_STOP_REASON_MINOR_INSTALLATION  0x00000003
#define SERVICE_STOP_REASON_MINOR_UPGRADE  0x00000004
#define SERVICE_STOP_REASON_MINOR_RECONFIG  0x00000005
#define SERVICE_STOP_REASON_MINOR_HUNG  0x00000006
#define SERVICE_STOP_REASON_MINOR_UNSTABLE  0x00000007
#define SERVICE_STOP_REASON_MINOR_DISK  0x00000008
#define SERVICE_STOP_REASON_MINOR_NETWORKCARD  0x00000009
#define SERVICE_STOP_REASON_MINOR_ENVIRONMENT  0x0000000a
#define SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER  0x0000000b
#define SERVICE_STOP_REASON_MINOR_OTHERDRIVER  0x0000000c
#define SERVICE_STOP_REASON_MINOR_SERVICEPACK  0x0000000d
#define SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE  0x0000000e
#define SERVICE_STOP_REASON_MINOR_SECURITYFIX  0x0000000f
#define SERVICE_STOP_REASON_MINOR_SECURITY  0x00000010
#define SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY  0x00000011
#define SERVICE_STOP_REASON_MINOR_WMI  0x00000012 
#define SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL  0x00000013
#define SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL  0x00000014
#define SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL  0x00000015
#define SERVICE_STOP_REASON_MINOR_MMC  0x00000016
#define SERVICE_STOP_REASON_MINOR_NONE  0x00000017
#define SERVICE_STOP_REASON_MINOR_MAX  0x00000018
#define SERVICE_STOP_REASON_MINOR_MIN_CUSTOM  0x00000100
#define SERVICE_STOP_REASON_MINOR_MAX_CUSTOM  0x0000FFFF

#define SERVICE_CONTROL_STATUS_REASON_INFO  1

#define SERVICE_SID_TYPE_NONE  0x00000000
#define SERVICE_SID_TYPE_UNRESTRICTED  0x00000001
#define SERVICE_SID_TYPE_RESTRICTED  (0x00000002|SERVICE_SID_TYPE_UNRESTRICTED)

typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;

typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;

typedef enum _SC_ACTION_TYPE {
    SC_ACTION_NONE=0,
    SC_ACTION_RESTART=1,
    SC_ACTION_REBOOT=2,
    SC_ACTION_RUN_COMMAND=3
} SC_ACTION_TYPE;

typedef struct _SC_ACTION {
    SC_ACTION_TYPE Type;
    DWORD Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;
    DWORD cActions;
    SC_ACTION *lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;

typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;
    DWORD cActions;
    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;


typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
    BOOL fDelayedAutostart;
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO;

typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
    BOOL fFailureActionsOnNonCrashFailures;
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG;

typedef struct _SERVICE_SID_INFO {
    DWORD dwServiceSidType;
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO;

typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
    LPSTR pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;

typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
    LPWSTR pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;

typedef struct _SERVICE_PRESHUTDOWN_INFO {
    DWORD dwPreshutdownTimeout;
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO;

DECLARE_HANDLE(SC_HANDLE);
typedef SC_HANDLE *LPSC_HANDLE;

DECLARE_HANDLE(SERVICE_STATUS_HANDLE);

typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO=0
} SC_STATUS_TYPE;

typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO=0
} SC_ENUM_TYPE;

typedef struct _SERVICE_STATUS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;

typedef struct _SERVICE_STATUS_PROCESS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;

typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;

typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;

typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;

typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;

typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;

typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;

typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;

typedef VOID (WINAPI *LPSERVICE_MAIN_FUNCTIONW)(DWORD,LPWSTR*);
typedef VOID (WINAPI *LPSERVICE_MAIN_FUNCTIONA)(DWORD,LPSTR*);

typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;

typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;

typedef VOID (WINAPI *LPHANDLER_FUNCTION)(DWORD);
typedef DWORD (WINAPI *LPHANDLER_FUNCTION_EX)(DWORD,DWORD,LPVOID,LPVOID);

typedef VOID (CALLBACK *PFN_SC_NOTIFY_CALLBACK)(PVOID);

typedef struct _SERVICE_NOTIFY_1 {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback; 
    PVOID pContext; 
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1;

typedef struct _SERVICE_NOTIFY_2A {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback; 
    PVOID pContext; 
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPSTR pszServiceNames;
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A;

typedef struct _SERVICE_NOTIFY_2W {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback; 
    PVOID pContext; 
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPWSTR pszServiceNames;
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W;

typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW;

typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
    DWORD dwReason;
    LPSTR pszComment;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;

typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
    DWORD dwReason;
    LPWSTR pszComment;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;

typedef LPVOID SC_LOCK;

WINADVAPI BOOL WINAPI ChangeServiceConfigA(SC_HANDLE,DWORD,DWORD,DWORD,LPCSTR,LPCSTR,LPDWORD,LPCSTR,LPCSTR,LPCSTR,LPCSTR);
WINADVAPI BOOL WINAPI ChangeServiceConfigW(SC_HANDLE,DWORD,DWORD,DWORD,LPCWSTR,LPCWSTR,LPDWORD,LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR);
WINADVAPI BOOL WINAPI ChangeServiceConfig2A(SC_HANDLE,DWORD,LPVOID);
WINADVAPI BOOL WINAPI ChangeServiceConfig2W(SC_HANDLE,DWORD,LPVOID);
WINADVAPI BOOL WINAPI CloseServiceHandle(SC_HANDLE);
WINADVAPI BOOL WINAPI ControlService(SC_HANDLE,DWORD,LPSERVICE_STATUS);
WINADVAPI SC_HANDLE WINAPI CreateServiceA(SC_HANDLE,LPCSTR,LPCSTR,DWORD,DWORD,DWORD,DWORD,LPCSTR,LPCSTR,LPDWORD,LPCSTR,LPCSTR,LPCSTR);
WINADVAPI SC_HANDLE WINAPI CreateServiceW(SC_HANDLE,LPCWSTR,LPCWSTR,DWORD,DWORD,DWORD,DWORD,LPCWSTR,LPCWSTR,LPDWORD,LPCWSTR,LPCWSTR,LPCWSTR);
WINADVAPI BOOL WINAPI DeleteService(SC_HANDLE);
WINADVAPI BOOL WINAPI EnumDependentServicesA(SC_HANDLE,DWORD,LPENUM_SERVICE_STATUSA,DWORD,LPDWORD,LPDWORD);
WINADVAPI BOOL WINAPI EnumDependentServicesW(SC_HANDLE,DWORD,LPENUM_SERVICE_STATUSW,DWORD,LPDWORD,LPDWORD);
WINADVAPI BOOL WINAPI EnumServicesStatusA(SC_HANDLE,DWORD,DWORD,LPENUM_SERVICE_STATUSA,DWORD,LPDWORD,LPDWORD,LPDWORD);
WINADVAPI BOOL WINAPI EnumServicesStatusW(SC_HANDLE,DWORD,DWORD,LPENUM_SERVICE_STATUSW,DWORD,LPDWORD,LPDWORD,LPDWORD);
WINADVAPI BOOL WINAPI EnumServicesStatusExA(SC_HANDLE,SC_ENUM_TYPE,DWORD,DWORD,LPBYTE,DWORD,LPDWORD,LPDWORD,LPDWORD,LPCSTR);
WINADVAPI BOOL WINAPI EnumServicesStatusExW(SC_HANDLE,SC_ENUM_TYPE,DWORD,DWORD,LPBYTE,DWORD,LPDWORD,LPDWORD,LPDWORD,LPCWSTR);
WINADVAPI BOOL WINAPI GetServiceKeyNameA(SC_HANDLE,LPCSTR,LPSTR,LPDWORD);
WINADVAPI BOOL WINAPI GetServiceKeyNameW(SC_HANDLE,LPCWSTR,LPWSTR,LPDWORD);
WINADVAPI BOOL WINAPI GetServiceDisplayNameA(SC_HANDLE,LPCSTR,LPSTR,LPDWORD);
WINADVAPI BOOL WINAPI GetServiceDisplayNameW(SC_HANDLE,LPCWSTR,LPWSTR,LPDWORD);
WINADVAPI SC_LOCK WINAPI LockServiceDatabase(SC_HANDLE);
WINADVAPI BOOL WINAPI NotifyBootConfigStatus(BOOL);
WINADVAPI SC_HANDLE WINAPI OpenSCManagerA(LPCSTR,LPCSTR,DWORD);
WINADVAPI SC_HANDLE WINAPI OpenSCManagerW(LPCWSTR,LPCWSTR,DWORD);
WINADVAPI SC_HANDLE WINAPI OpenServiceA(SC_HANDLE,LPCSTR,DWORD);
WINADVAPI SC_HANDLE WINAPI OpenServiceW(SC_HANDLE,LPCWSTR,DWORD);
WINADVAPI BOOL WINAPI QueryServiceConfigA(SC_HANDLE,LPQUERY_SERVICE_CONFIGA,DWORD,LPDWORD);
WINADVAPI BOOL WINAPI QueryServiceConfigW(SC_HANDLE,LPQUERY_SERVICE_CONFIGW,DWORD,LPDWORD);
WINADVAPI BOOL WINAPI QueryServiceConfig2A(SC_HANDLE,DWORD,LPBYTE,DWORD,LPDWORD);
WINADVAPI BOOL WINAPI QueryServiceConfig2W(SC_HANDLE,DWORD,LPBYTE,DWORD,LPDWORD);
WINADVAPI BOOL WINAPI QueryServiceLockStatusA(SC_HANDLE,LPQUERY_SERVICE_LOCK_STATUSA,DWORD,LPDWORD);
WINADVAPI BOOL WINAPI QueryServiceLockStatusW(SC_HANDLE,LPQUERY_SERVICE_LOCK_STATUSW,DWORD,LPDWORD);
WINADVAPI BOOL WINAPI QueryServiceObjectSecurity(SC_HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,LPDWORD);
WINADVAPI BOOL WINAPI QueryServiceStatus(SC_HANDLE,LPSERVICE_STATUS);
WINADVAPI BOOL WINAPI QueryServiceStatusEx(SC_HANDLE,SC_STATUS_TYPE,LPBYTE,DWORD,LPDWORD);
WINADVAPI SERVICE_STATUS_HANDLE WINAPI RegisterServiceCtrlHandlerA(LPCSTR,LPHANDLER_FUNCTION);
WINADVAPI SERVICE_STATUS_HANDLE WINAPI RegisterServiceCtrlHandlerW(LPCWSTR,LPHANDLER_FUNCTION);
WINADVAPI SERVICE_STATUS_HANDLE WINAPI RegisterServiceCtrlHandlerExA(LPCSTR,LPHANDLER_FUNCTION_EX,LPVOID);
WINADVAPI SERVICE_STATUS_HANDLE WINAPI RegisterServiceCtrlHandlerExW(LPCWSTR,LPHANDLER_FUNCTION_EX,LPVOID);
WINADVAPI BOOL WINAPI SetServiceObjectSecurity(SC_HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
WINADVAPI BOOL WINAPI SetServiceStatus(SERVICE_STATUS_HANDLE,LPSERVICE_STATUS);
WINADVAPI BOOL WINAPI StartServiceCtrlDispatcherA(CONST SERVICE_TABLE_ENTRYA*);
WINADVAPI BOOL WINAPI StartServiceCtrlDispatcherW(CONST SERVICE_TABLE_ENTRYW*);
WINADVAPI BOOL WINAPI StartServiceA(SC_HANDLE,DWORD,LPCSTR*);
WINADVAPI BOOL WINAPI StartServiceW(SC_HANDLE,DWORD,LPCWSTR*);
WINADVAPI BOOL WINAPI UnlockServiceDatabase(SC_LOCK);
#if (NTDDI_VERSION >= NTDDI_VISTA)
WINADVAPI DWORD WINAPI NotifyServiceStatusChangeA(SC_HANDLE,DWORD,PSERVICE_NOTIFYA);
WINADVAPI DWORD WINAPI NotifyServiceStatusChangeW(SC_HANDLE,DWORD,PSERVICE_NOTIFYW);
WINADVAPI BOOL WINAPI ControlServiceExA(SC_HANDLE,DWORD,DWORD,PVOID);
WINADVAPI BOOL WINAPI ControlServiceExW(SC_HANDLE,DWORD,DWORD,PVOID);
#endif /* NTDDI_VERSION >= NTDDI_VISTA */

#ifdef UNICODE
typedef SERVICE_DESCRIPTIONW SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONW LPSERVICE_DESCRIPTION;
typedef SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSW LPSERVICE_FAILURE_ACTIONS;
typedef ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSW LPENUM_SERVICE_STATUS;
typedef ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSW LPENUM_SERVICE_STATUS_PROCESS;
typedef QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSW LPQUERY_SERVICE_LOCK_STATUS;
typedef QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGW LPQUERY_SERVICE_CONFIG;
#define LPSERVICE_MAIN_FUNCTION LPSERVICE_MAIN_FUNCTIONW
typedef SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYW LPSERVICE_TABLE_ENTRY;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2W PSERVICE_NOTIFY_2;
typedef SERVICE_NOTIFYW SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYW PSERVICE_NOTIFY;
typedef SERVICE_CONTROL_STATUS_REASON_PARAMSW SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSW PSERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef SERVICE_REQUIRED_PRIVILEGES_INFOW SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOW LPSERVICE_REQUIRED_PRIVILEGES_INFO;
#define ChangeServiceConfig ChangeServiceConfigW
#define ChangeServiceConfig2 ChangeServiceConfig2W
#define CreateService CreateServiceW
#define EnumDependentServices EnumDependentServicesW
#define EnumServicesStatus EnumServicesStatusW
#define EnumServicesStatusEx EnumServicesStatusExW
#define GetServiceKeyName GetServiceKeyNameW
#define GetServiceDisplayName GetServiceDisplayNameW
#define OpenSCManager OpenSCManagerW
#define OpenService OpenServiceW
#define QueryServiceConfig QueryServiceConfigW
#define QueryServiceConfig2 QueryServiceConfig2W
#define QueryServiceLockStatus QueryServiceLockStatusW
#define RegisterServiceCtrlHandler RegisterServiceCtrlHandlerW
#define RegisterServiceCtrlHandlerEx RegisterServiceCtrlHandlerExW
#define StartServiceCtrlDispatcher StartServiceCtrlDispatcherW
#define StartService StartServiceW
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define NotifyServiceStatusChange  NotifyServiceStatusChangeW
#define ControlServiceEx  ControlServiceExW
#endif /* NTDDI_VERSION >= NTDDI_VISTA */
#else
typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
#define LPSERVICE_MAIN_FUNCTION LPSERVICE_MAIN_FUNCTIONA
typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
typedef SERVICE_NOTIFY_2A SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2;
typedef SERVICE_NOTIFYA SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY;
typedef SERVICE_CONTROL_STATUS_REASON_PARAMSA SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef SERVICE_REQUIRED_PRIVILEGES_INFOA SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO;
#define ChangeServiceConfig ChangeServiceConfigA
#define ChangeServiceConfig2 ChangeServiceConfig2A
#define CreateService CreateServiceA
#define EnumDependentServices EnumDependentServicesA
#define EnumServicesStatus EnumServicesStatusA
#define EnumServicesStatusEx EnumServicesStatusExA
#define GetServiceKeyName GetServiceKeyNameA
#define GetServiceDisplayName GetServiceDisplayNameA
#define OpenSCManager OpenSCManagerA
#define OpenService OpenServiceA
#define QueryServiceConfig QueryServiceConfigA
#define QueryServiceConfig2 QueryServiceConfig2A
#define QueryServiceLockStatus QueryServiceLockStatusA
#define RegisterServiceCtrlHandler RegisterServiceCtrlHandlerA
#define RegisterServiceCtrlHandlerEx RegisterServiceCtrlHandlerExA
#define StartServiceCtrlDispatcher StartServiceCtrlDispatcherA
#define StartService StartServiceA
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define NotifyServiceStatusChange  NotifyServiceStatusChangeA
#define ControlServiceEx  ControlServiceExA
#endif /* NTDDI_VERSION >= NTDDI_VISTA */
#endif /* UNICODE */

#ifdef __cplusplus
}
#endif

#endif /* _WINSVC_H */
